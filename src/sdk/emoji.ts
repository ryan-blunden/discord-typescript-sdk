/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { emojiCreateApplicationEmoji } from "../funcs/emojiCreateApplicationEmoji.js";
import { emojiCreateGuildEmoji } from "../funcs/emojiCreateGuildEmoji.js";
import { emojiDeleteApplicationEmoji } from "../funcs/emojiDeleteApplicationEmoji.js";
import { emojiDeleteGuildEmoji } from "../funcs/emojiDeleteGuildEmoji.js";
import { emojiGetApplicationEmoji } from "../funcs/emojiGetApplicationEmoji.js";
import { emojiGetGuildEmoji } from "../funcs/emojiGetGuildEmoji.js";
import { emojiListApplicationEmojis } from "../funcs/emojiListApplicationEmojis.js";
import { emojiListGuildEmojis } from "../funcs/emojiListGuildEmojis.js";
import { emojiUpdateApplicationEmoji } from "../funcs/emojiUpdateApplicationEmoji.js";
import { emojiUpdateGuildEmoji } from "../funcs/emojiUpdateGuildEmoji.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Emoji extends ClientSDK {
  /**
   * Returns an emoji object for the given application and emoji IDs. Includes the user field.
   */
  async getApplicationEmoji(
    request: operations.GetApplicationEmojiRequest,
    options?: RequestOptions,
  ): Promise<components.EmojiResponse> {
    return unwrapAsync(emojiGetApplicationEmoji(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete the given emoji. Returns 204 No Content on success.
   */
  async deleteApplicationEmoji(
    request: operations.DeleteApplicationEmojiRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(emojiDeleteApplicationEmoji(
      this,
      request,
      options,
    ));
  }

  /**
   * Modify the given emoji. Returns the updated emoji object on success.
   */
  async updateApplicationEmoji(
    request: operations.UpdateApplicationEmojiRequest,
    options?: RequestOptions,
  ): Promise<components.EmojiResponse> {
    return unwrapAsync(emojiUpdateApplicationEmoji(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns an object containing a list of emoji objects for the given application under the items key. Includes a user object for the team member that uploaded the emoji from the app's settings, or for the bot user if uploaded using the API.
   */
  async listApplicationEmojis(
    request: operations.ListApplicationEmojisRequest,
    options?: RequestOptions,
  ): Promise<components.ListApplicationEmojisResponse> {
    return unwrapAsync(emojiListApplicationEmojis(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new emoji for the application. Returns the new emoji object on success.
   */
  async createApplicationEmoji(
    request: operations.CreateApplicationEmojiRequest,
    options?: RequestOptions,
  ): Promise<components.EmojiResponse> {
    return unwrapAsync(emojiCreateApplicationEmoji(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns an emoji object for the given guild and emoji IDs. Includes the user field if the bot has the MANAGE_GUILD_EXPRESSIONS permission, or if the bot created the emoji and has the the CREATE_GUILD_EXPRESSIONS permission.
   */
  async getGuildEmoji(
    request: operations.GetGuildEmojiRequest,
    options?: RequestOptions,
  ): Promise<components.EmojiResponse> {
    return unwrapAsync(emojiGetGuildEmoji(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete the given emoji. For emojis created by the current user, requires either the CREATE_GUILD_EXPRESSIONS or MANAGE_GUILD_EXPRESSIONS permission. For other emojis, requires the MANAGE_GUILD_EXPRESSIONS permission. Returns 204 No Content on success. Fires a Guild Emojis Update Gateway event.
   */
  async deleteGuildEmoji(
    request: operations.DeleteGuildEmojiRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(emojiDeleteGuildEmoji(
      this,
      request,
      options,
    ));
  }

  /**
   * Modify the given emoji. For emojis created by the current user, requires either the CREATE_GUILD_EXPRESSIONS or MANAGE_GUILD_EXPRESSIONS permission. For other emojis, requires the MANAGE_GUILD_EXPRESSIONS permission. Returns the updated emoji object on success. Fires a Guild Emojis Update Gateway event.
   */
  async updateGuildEmoji(
    request: operations.UpdateGuildEmojiRequest,
    options?: RequestOptions,
  ): Promise<components.EmojiResponse> {
    return unwrapAsync(emojiUpdateGuildEmoji(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of emoji objects for the given guild. Includes user fields if the bot has the CREATE_GUILD_EXPRESSIONS or MANAGE_GUILD_EXPRESSIONS permission.
   */
  async listGuildEmojis(
    request: operations.ListGuildEmojisRequest,
    options?: RequestOptions,
  ): Promise<Array<components.EmojiResponse>> {
    return unwrapAsync(emojiListGuildEmojis(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new emoji for the guild. Requires the CREATE_GUILD_EXPRESSIONS permission. Returns the new emoji object on success. Fires a Guild Emojis Update Gateway event.
   */
  async createGuildEmoji(
    request: operations.CreateGuildEmojiRequest,
    options?: RequestOptions,
  ): Promise<components.EmojiResponse> {
    return unwrapAsync(emojiCreateGuildEmoji(
      this,
      request,
      options,
    ));
  }
}
