/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { applicationsGet } from "../funcs/applicationsGet.js";
import { applicationsGetActivityInstance } from "../funcs/applicationsGetActivityInstance.js";
import { applicationsGetBotGateway } from "../funcs/applicationsGetBotGateway.js";
import { applicationsGetGateway } from "../funcs/applicationsGetGateway.js";
import { applicationsGetMe } from "../funcs/applicationsGetMe.js";
import { applicationsGetOAuth2Authorization } from "../funcs/applicationsGetOAuth2Authorization.js";
import { applicationsGetOAuth2Me } from "../funcs/applicationsGetOAuth2Me.js";
import { applicationsGetOpenIDConnectUserInfo } from "../funcs/applicationsGetOpenIDConnectUserInfo.js";
import { applicationsGetPublicKeys } from "../funcs/applicationsGetPublicKeys.js";
import { applicationsPartnerSDKToken } from "../funcs/applicationsPartnerSDKToken.js";
import { applicationsPartnerSDKUnmergeProvisionalAccount } from "../funcs/applicationsPartnerSDKUnmergeProvisionalAccount.js";
import { applicationsUpdate } from "../funcs/applicationsUpdate.js";
import { applicationsUpdateSelf } from "../funcs/applicationsUpdateSelf.js";
import { applicationsUploadAttachment } from "../funcs/applicationsUploadAttachment.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Applications extends ClientSDK {
  /**
   * Returns the application object associated with the requesting bot user.
   */
  async getMe(
    options?: RequestOptions,
  ): Promise<components.PrivateApplicationResponse> {
    return unwrapAsync(applicationsGetMe(
      this,
      options,
    ));
  }

  /**
   * Edit properties of the app associated with the requesting bot user. Only properties that are passed will be updated. Returns the updated application object on success.
   */
  async updateSelf(
    request: components.ApplicationFormPartial,
    options?: RequestOptions,
  ): Promise<components.PrivateApplicationResponse> {
    return unwrapAsync(applicationsUpdateSelf(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns information about a specific application.
   */
  async get(
    request: operations.GetApplicationRequest,
    options?: RequestOptions,
  ): Promise<components.PrivateApplicationResponse> {
    return unwrapAsync(applicationsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Updates an application. Returns the updated application object on success.
   */
  async update(
    request: operations.UpdateApplicationRequest,
    options?: RequestOptions,
  ): Promise<components.PrivateApplicationResponse> {
    return unwrapAsync(applicationsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a serialized activity instance, if it exists. Useful for preventing unwanted activity sessions.
   */
  async getActivityInstance(
    request: operations.ApplicationsGetActivityInstanceRequest,
    options?: RequestOptions,
  ): Promise<components.EmbeddedActivityInstance> {
    return unwrapAsync(applicationsGetActivityInstance(
      this,
      request,
      options,
    ));
  }

  /**
   * Uploads an attachment for an application.
   */
  async uploadAttachment(
    security: operations.UploadApplicationAttachmentSecurity,
    request: operations.UploadApplicationAttachmentRequest,
    options?: RequestOptions,
  ): Promise<components.ActivitiesAttachmentResponse> {
    return unwrapAsync(applicationsUploadAttachment(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Returns an object with a single valid WSS URL, which the client can use for connecting to Discord.
   */
  async getGateway(
    security?: operations.GetGatewaySecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.GatewayResponse> {
    return unwrapAsync(applicationsGetGateway(
      this,
      security,
      options,
    ));
  }

  /**
   * Returns an object with the same information as Get Gateway, plus a shards key, containing the recommended number of shards to connect with.
   */
  async getBotGateway(
    options?: RequestOptions,
  ): Promise<components.GatewayBotResponse> {
    return unwrapAsync(applicationsGetBotGateway(
      this,
      options,
    ));
  }

  /**
   * Returns info about the current authorization.
   */
  async getOAuth2Authorization(
    security: operations.GetMyOauth2AuthorizationSecurity,
    options?: RequestOptions,
  ): Promise<components.OAuth2GetAuthorizationResponse> {
    return unwrapAsync(applicationsGetOAuth2Authorization(
      this,
      security,
      options,
    ));
  }

  /**
   * Returns the OAuth2 application object associated with the requesting bot user.
   */
  async getOAuth2Me(
    options?: RequestOptions,
  ): Promise<components.PrivateApplicationResponse> {
    return unwrapAsync(applicationsGetOAuth2Me(
      this,
      options,
    ));
  }

  /**
   * Returns a list of public keys used for verifying signatures.
   */
  async getPublicKeys(
    security?: operations.GetPublicKeysSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.OAuth2GetKeys> {
    return unwrapAsync(applicationsGetPublicKeys(
      this,
      security,
      options,
    ));
  }

  /**
   * Returns the user info for the current user.
   */
  async getOpenIDConnectUserInfo(
    security: operations.GetOpenidConnectUserinfoSecurity,
    options?: RequestOptions,
  ): Promise<components.OAuth2GetOpenIDConnectUserInfoResponse> {
    return unwrapAsync(applicationsGetOpenIDConnectUserInfo(
      this,
      security,
      options,
    ));
  }

  /**
   * Unmerges a provisional account.
   */
  async partnerSDKUnmergeProvisionalAccount(
    request: operations.PartnerSDKUnmergeProvisionalAccountRequestBody,
    security?:
      | operations.PartnerSDKUnmergeProvisionalAccountSecurity
      | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(applicationsPartnerSDKUnmergeProvisionalAccount(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Gets a token for the partner SDK.
   */
  async partnerSDKToken(
    request: operations.PartnerSDKTokenRequestBody,
    security?: operations.PartnerSDKTokenSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.ProvisionalTokenResponse> {
    return unwrapAsync(applicationsPartnerSDKToken(
      this,
      request,
      security,
      options,
    ));
  }
}
