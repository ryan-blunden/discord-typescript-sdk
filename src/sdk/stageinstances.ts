/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { stageInstancesCreate } from "../funcs/stageInstancesCreate.js";
import { stageInstancesDelete } from "../funcs/stageInstancesDelete.js";
import { stageInstancesGet } from "../funcs/stageInstancesGet.js";
import { stageInstancesUpdate } from "../funcs/stageInstancesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class StageInstances extends ClientSDK {
  /**
   * Creates a new Stage instance associated to a Stage channel. Returns that Stage instance. Fires a Stage Instance Create Gateway event. Requires the user to be a moderator of the Stage channel.
   */
  async create(
    request: operations.CreateStageInstanceRequestBody,
    options?: RequestOptions,
  ): Promise<components.StageInstanceResponse> {
    return unwrapAsync(stageInstancesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets the stage instance associated with the Stage channel, if it exists.
   */
  async get(
    request: operations.GetStageInstanceRequest,
    options?: RequestOptions,
  ): Promise<components.StageInstanceResponse> {
    return unwrapAsync(stageInstancesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes the Stage instance. Returns 204 No Content. Fires a Stage Instance Delete Gateway event. Requires the user to be a moderator of the Stage channel.
   */
  async delete(
    request: operations.DeleteStageInstanceRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(stageInstancesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Updates fields of an existing Stage instance. Returns the updated Stage instance. Fires a Stage Instance Update Gateway event. Requires the user to be a moderator of the Stage channel.
   */
  async update(
    request: operations.UpdateStageInstanceRequest,
    options?: RequestOptions,
  ): Promise<components.StageInstanceResponse> {
    return unwrapAsync(stageInstancesUpdate(
      this,
      request,
      options,
    ));
  }
}
