/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { messagesBulkDelete } from "../funcs/messagesBulkDelete.js";
import { messagesCreateForm } from "../funcs/messagesCreateForm.js";
import { messagesCreateJson } from "../funcs/messagesCreateJson.js";
import { messagesCreateMultipart } from "../funcs/messagesCreateMultipart.js";
import { messagesCreateReaction } from "../funcs/messagesCreateReaction.js";
import { messagesCrosspost } from "../funcs/messagesCrosspost.js";
import { messagesDelete } from "../funcs/messagesDelete.js";
import { messagesDeleteAllReactions } from "../funcs/messagesDeleteAllReactions.js";
import { messagesDeleteAllReactionsForEmoji } from "../funcs/messagesDeleteAllReactionsForEmoji.js";
import { messagesDeleteOwnReaction } from "../funcs/messagesDeleteOwnReaction.js";
import { messagesDeleteUserReaction } from "../funcs/messagesDeleteUserReaction.js";
import { messagesGet } from "../funcs/messagesGet.js";
import { messagesList } from "../funcs/messagesList.js";
import { messagesListReactionsByEmoji } from "../funcs/messagesListReactionsByEmoji.js";
import { messagesUpdateForm } from "../funcs/messagesUpdateForm.js";
import { messagesUpdateJson } from "../funcs/messagesUpdateJson.js";
import { messagesUpdateMultipart } from "../funcs/messagesUpdateMultipart.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Messages extends ClientSDK {
  /**
   * Returns the messages for a channel. If operating on a guild channel, this endpoint requires the VIEW_CHANNEL permission to be present on the current user.
   */
  async list(
    request: operations.ListMessagesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.MessageResponse>> {
    return unwrapAsync(messagesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Post a message to a guild text or DM channel. If operating on a guild channel, this endpoint requires the SEND_MESSAGES permission to be present on the current user.
   */
  async createJson(
    request: operations.CreateMessageJsonRequest,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(messagesCreateJson(
      this,
      request,
      options,
    ));
  }

  /**
   * Post a message to a guild text or DM channel. If operating on a guild channel, this endpoint requires the SEND_MESSAGES permission to be present on the current user.
   */
  async createForm(
    request: operations.CreateMessageFormRequest,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(messagesCreateForm(
      this,
      request,
      options,
    ));
  }

  /**
   * Post a message to a guild text or DM channel. If operating on a guild channel, this endpoint requires the SEND_MESSAGES permission to be present on the current user.
   */
  async createMultipart(
    request: operations.CreateMessageMultipartRequest,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(messagesCreateMultipart(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete multiple messages in a single request. This endpoint can only be used on guild channels and requires the MANAGE_MESSAGES permission.
   */
  async bulkDelete(
    request: operations.BulkDeleteMessagesRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(messagesBulkDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a specific message in the channel. If operating on a guild channel, this endpoint requires the READ_MESSAGE_HISTORY permission to be present on the current user.
   */
  async get(
    request: operations.GetMessageRequest,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(messagesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a message. If operating on a guild channel and trying to delete a message that was not sent by the current user, this endpoint requires the MANAGE_MESSAGES permission.
   */
  async delete(
    request: operations.DeleteMessageRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(messagesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Edit a previously sent message. The fields content, embeds, and flags can be edited by the original message author. Other users can only edit flags and only if they have the MANAGE_MESSAGES permission in the corresponding channel.
   */
  async updateJson(
    request: operations.UpdateMessageJsonRequest,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(messagesUpdateJson(
      this,
      request,
      options,
    ));
  }

  /**
   * Edit a previously sent message. The fields content, embeds, and flags can be edited by the original message author. Other users can only edit flags and only if they have the MANAGE_MESSAGES permission in the corresponding channel.
   */
  async updateForm(
    request: operations.UpdateMessageFormRequest,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(messagesUpdateForm(
      this,
      request,
      options,
    ));
  }

  /**
   * Edit a previously sent message. The fields content, embeds, and flags can be edited by the original message author. Other users can only edit flags and only if they have the MANAGE_MESSAGES permission in the corresponding channel.
   */
  async updateMultipart(
    request: operations.UpdateMessageMultipartRequest,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(messagesUpdateMultipart(
      this,
      request,
      options,
    ));
  }

  /**
   * Crosspost a message in an Announcement Channel to following channels. This endpoint requires the SEND_MESSAGES permission, if the current user sent the message, or additionally the MANAGE_MESSAGES permission, for all other messages, to be present for the current user.
   */
  async crosspost(
    request: operations.CrosspostMessageRequest,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(messagesCrosspost(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes all reactions on a message. This endpoint requires the MANAGE_MESSAGES permission to be present on the current user.
   */
  async deleteAllReactions(
    request: operations.DeleteAllMessageReactionsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(messagesDeleteAllReactions(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a list of users that reacted with a specific emoji.
   */
  async listReactionsByEmoji(
    request: operations.ListMessageReactionsByEmojiRequest,
    options?: RequestOptions,
  ): Promise<Array<components.UserResponse>> {
    return unwrapAsync(messagesListReactionsByEmoji(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes all the reactions for a given emoji on a message. This endpoint requires the MANAGE_MESSAGES permission to be present on the current user.
   */
  async deleteAllReactionsForEmoji(
    request: operations.DeleteAllMessageReactionsByEmojiRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(messagesDeleteAllReactionsForEmoji(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a reaction for the message. This endpoint requires the READ_MESSAGE_HISTORY permission to be present on the current user.
   */
  async createReaction(
    request: operations.AddMyMessageReactionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(messagesCreateReaction(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a reaction the current user has made for the message. Returns a 204 empty response on success.
   */
  async deleteOwnReaction(
    request: operations.DeleteMyMessageReactionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(messagesDeleteOwnReaction(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes another user's reaction. This endpoint requires the MANAGE_MESSAGES permission to be present on the current user.
   */
  async deleteUserReaction(
    request: operations.DeleteUserMessageReactionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(messagesDeleteUserReaction(
      this,
      request,
      options,
    ));
  }
}
