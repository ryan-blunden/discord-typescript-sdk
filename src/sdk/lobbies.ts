/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { lobbiesAddMember } from "../funcs/lobbiesAddMember.js";
import { lobbiesConnectToChannel } from "../funcs/lobbiesConnectToChannel.js";
import { lobbiesCreate } from "../funcs/lobbiesCreate.js";
import { lobbiesCreateOrJoin } from "../funcs/lobbiesCreateOrJoin.js";
import { lobbiesGet } from "../funcs/lobbiesGet.js";
import { lobbiesLeave } from "../funcs/lobbiesLeave.js";
import { lobbiesRemoveMember } from "../funcs/lobbiesRemoveMember.js";
import { lobbiesSendMessage } from "../funcs/lobbiesSendMessage.js";
import { lobbiesUpdate } from "../funcs/lobbiesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Lobbies extends ClientSDK {
  /**
   * Creates a new lobby or joins an existing one. Returns a lobby object on success.
   */
  async createOrJoin(
    security: operations.CreateOrJoinLobbySecurity,
    request: operations.CreateOrJoinLobbyRequestBody,
    options?: RequestOptions,
  ): Promise<components.LobbyResponse> {
    return unwrapAsync(lobbiesCreateOrJoin(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Creates a new lobby. Returns a lobby object on success.
   */
  async create(
    request: operations.CreateLobbyRequestBody,
    options?: RequestOptions,
  ): Promise<components.LobbyResponse> {
    return unwrapAsync(lobbiesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Removes the current user from the specified lobby. It is safe to call this even if the user is no longer a member of the lobby, but will fail if the lobby does not exist.
   */
  async leave(
    security: operations.LeaveLobbySecurity,
    request: operations.LeaveLobbyRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(lobbiesLeave(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Connects a lobby to a channel.
   */
  async connectToChannel(
    security: operations.EditLobbyChannelLinkSecurity,
    request: operations.EditLobbyChannelLinkRequest,
    options?: RequestOptions,
  ): Promise<components.LobbyResponse> {
    return unwrapAsync(lobbiesConnectToChannel(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Sends a message to the lobby.
   */
  async sendMessage(
    security: operations.CreateLobbyMessageSecurity,
    request: operations.CreateLobbyMessageRequest,
    options?: RequestOptions,
  ): Promise<components.LobbyMessageResponse> {
    return unwrapAsync(lobbiesSendMessage(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Adds a user to a lobby.
   */
  async addMember(
    request: operations.AddLobbyMemberRequest,
    options?: RequestOptions,
  ): Promise<components.LobbyMemberResponse> {
    return unwrapAsync(lobbiesAddMember(
      this,
      request,
      options,
    ));
  }

  /**
   * Removes a user from a lobby.
   */
  async removeMember(
    request: operations.DeleteLobbyMemberRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(lobbiesRemoveMember(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns the lobby object for the given id.
   */
  async get(
    request: operations.GetLobbyRequest,
    options?: RequestOptions,
  ): Promise<components.LobbyResponse> {
    return unwrapAsync(lobbiesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Updates a lobby. Returns a lobby object on success.
   */
  async update(
    request: operations.EditLobbyRequest,
    options?: RequestOptions,
  ): Promise<components.LobbyResponse> {
    return unwrapAsync(lobbiesUpdate(
      this,
      request,
      options,
    ));
  }
}
