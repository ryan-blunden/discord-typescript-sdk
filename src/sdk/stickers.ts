/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { stickersCreateGuildSticker } from "../funcs/stickersCreateGuildSticker.js";
import { stickersDeleteGuildSticker } from "../funcs/stickersDeleteGuildSticker.js";
import { stickersGet } from "../funcs/stickersGet.js";
import { stickersGetGuildSticker } from "../funcs/stickersGetGuildSticker.js";
import { stickersGetPack } from "../funcs/stickersGetPack.js";
import { stickersListGuildStickers } from "../funcs/stickersListGuildStickers.js";
import { stickersListPacks } from "../funcs/stickersListPacks.js";
import { stickersUpdateGuildSticker } from "../funcs/stickersUpdateGuildSticker.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Stickers extends ClientSDK {
  /**
   * Returns a list of available sticker packs.
   */
  async listPacks(
    security?: operations.ListStickerPacksSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.StickerPackCollectionResponse> {
    return unwrapAsync(stickersListPacks(
      this,
      security,
      options,
    ));
  }

  /**
   * Returns a sticker object for the given guild and sticker IDs. Includes the user field if the bot has the CREATE_GUILD_EXPRESSIONS or MANAGE_GUILD_EXPRESSIONS permission.
   */
  async getGuildSticker(
    request: operations.GetGuildStickerRequest,
    options?: RequestOptions,
  ): Promise<components.GuildStickerResponse> {
    return unwrapAsync(stickersGetGuildSticker(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete the given sticker. For stickers created by the current user, requires either the CREATE_GUILD_EXPRESSIONS or MANAGE_GUILD_EXPRESSIONS permission. For other stickers, requires the MANAGE_GUILD_EXPRESSIONS permission. Returns 204 No Content on success. Fires a Guild Stickers Update Gateway event.
   */
  async deleteGuildSticker(
    request: operations.DeleteGuildStickerRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(stickersDeleteGuildSticker(
      this,
      request,
      options,
    ));
  }

  /**
   * Modify the given sticker. For stickers created by the current user, requires either the CREATE_GUILD_EXPRESSIONS or MANAGE_GUILD_EXPRESSIONS permission. For other stickers, requires the MANAGE_GUILD_EXPRESSIONS permission. Returns the updated sticker object on success. Fires a Guild Stickers Update Gateway event.
   */
  async updateGuildSticker(
    request: operations.UpdateGuildStickerRequest,
    options?: RequestOptions,
  ): Promise<components.GuildStickerResponse> {
    return unwrapAsync(stickersUpdateGuildSticker(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns an array of sticker objects for the given guild. Includes user fields if the bot has the CREATE_GUILD_EXPRESSIONS or MANAGE_GUILD_EXPRESSIONS permission.
   */
  async listGuildStickers(
    request: operations.ListGuildStickersRequest,
    options?: RequestOptions,
  ): Promise<Array<components.GuildStickerResponse>> {
    return unwrapAsync(stickersListGuildStickers(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new sticker for the guild. Send a multipart/form-data body. Requires the CREATE_GUILD_EXPRESSIONS permission. Returns the new sticker object on success. Fires a Guild Stickers Update Gateway event.
   */
  async createGuildSticker(
    request: operations.CreateGuildStickerRequest,
    options?: RequestOptions,
  ): Promise<components.GuildStickerResponse> {
    return unwrapAsync(stickersCreateGuildSticker(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a sticker pack object for the given sticker pack ID.
   */
  async getPack(
    request: operations.GetStickerPackRequest,
    options?: RequestOptions,
  ): Promise<components.StickerPackResponse> {
    return unwrapAsync(stickersGetPack(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a sticker object for the given sticker ID.
   */
  async get(
    request: operations.GetStickerRequest,
    options?: RequestOptions,
  ): Promise<operations.GetStickerResponseBody> {
    return unwrapAsync(stickersGet(
      this,
      request,
      options,
    ));
  }
}
