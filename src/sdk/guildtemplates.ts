/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { guildTemplatesCreate } from "../funcs/guildTemplatesCreate.js";
import { guildTemplatesCreateGuild } from "../funcs/guildTemplatesCreateGuild.js";
import { guildTemplatesDelete } from "../funcs/guildTemplatesDelete.js";
import { guildTemplatesGet } from "../funcs/guildTemplatesGet.js";
import { guildTemplatesGetNewMemberWelcome } from "../funcs/guildTemplatesGetNewMemberWelcome.js";
import { guildTemplatesList } from "../funcs/guildTemplatesList.js";
import { guildTemplatesSync } from "../funcs/guildTemplatesSync.js";
import { guildTemplatesUpdate } from "../funcs/guildTemplatesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class GuildTemplates extends ClientSDK {
  /**
   * Returns a guild template object for the given code.
   */
  async get(
    request: operations.GetGuildTemplateRequest,
    security?: operations.GetGuildTemplateSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.GuildTemplateResponse> {
    return unwrapAsync(guildTemplatesGet(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Create a new guild based on a template. Returns a guild object on success. Fires a Guild Create Gateway event.
   */
  async createGuild(
    request: operations.CreateGuildFromTemplateRequest,
    options?: RequestOptions,
  ): Promise<components.GuildResponse> {
    return unwrapAsync(guildTemplatesCreateGuild(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns the welcome screen object for the guild.
   */
  async getNewMemberWelcome(
    request: operations.GetGuildNewMemberWelcomeRequest,
    options?: RequestOptions,
  ): Promise<components.GuildHomeSettingsResponse | undefined> {
    return unwrapAsync(guildTemplatesGetNewMemberWelcome(
      this,
      request,
      options,
    ));
  }

  /**
   * Syncs the template to the guild's current state. Requires the MANAGE_GUILD permission. Returns the guild template object on success.
   */
  async sync(
    request: operations.SyncGuildTemplateRequest,
    options?: RequestOptions,
  ): Promise<components.GuildTemplateResponse> {
    return unwrapAsync(guildTemplatesSync(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes the template. Requires the MANAGE_GUILD permission. Returns the deleted guild template object on success.
   */
  async delete(
    request: operations.DeleteGuildTemplateRequest,
    options?: RequestOptions,
  ): Promise<components.GuildTemplateResponse> {
    return unwrapAsync(guildTemplatesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Modifies the template's metadata. Requires the MANAGE_GUILD permission. Returns the guild template object on success.
   */
  async update(
    request: operations.UpdateGuildTemplateRequest,
    options?: RequestOptions,
  ): Promise<components.GuildTemplateResponse> {
    return unwrapAsync(guildTemplatesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns an array of guild template objects. Requires the MANAGE_GUILD permission.
   */
  async list(
    request: operations.ListGuildTemplatesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.GuildTemplateResponse>> {
    return unwrapAsync(guildTemplatesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates a template for the guild. Requires the MANAGE_GUILD permission. Returns the created guild template object on success.
   */
  async create(
    request: operations.CreateGuildTemplateRequest,
    options?: RequestOptions,
  ): Promise<components.GuildTemplateResponse> {
    return unwrapAsync(guildTemplatesCreate(
      this,
      request,
      options,
    ));
  }
}
