/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { guildsAddMember } from "../funcs/guildsAddMember.js";
import { guildsAddMemberRole } from "../funcs/guildsAddMemberRole.js";
import { guildsBulkBan } from "../funcs/guildsBulkBan.js";
import { guildsCreate } from "../funcs/guildsCreate.js";
import { guildsCreateBan } from "../funcs/guildsCreateBan.js";
import { guildsCreateChannel } from "../funcs/guildsCreateChannel.js";
import { guildsCreateRole } from "../funcs/guildsCreateRole.js";
import { guildsDelete } from "../funcs/guildsDelete.js";
import { guildsDeleteIntegration } from "../funcs/guildsDeleteIntegration.js";
import { guildsDeleteRole } from "../funcs/guildsDeleteRole.js";
import { guildsGet } from "../funcs/guildsGet.js";
import { guildsGetBan } from "../funcs/guildsGetBan.js";
import { guildsGetMember } from "../funcs/guildsGetMember.js";
import { guildsGetOnboarding } from "../funcs/guildsGetOnboarding.js";
import { guildsGetPreview } from "../funcs/guildsGetPreview.js";
import { guildsGetRole } from "../funcs/guildsGetRole.js";
import { guildsGetVanityUrl } from "../funcs/guildsGetVanityUrl.js";
import { guildsGetWelcomeScreen } from "../funcs/guildsGetWelcomeScreen.js";
import { guildsGetWidget } from "../funcs/guildsGetWidget.js";
import { guildsGetWidgetPng } from "../funcs/guildsGetWidgetPng.js";
import { guildsGetWidgetSettings } from "../funcs/guildsGetWidgetSettings.js";
import { guildsListActiveThreads } from "../funcs/guildsListActiveThreads.js";
import { guildsListBans } from "../funcs/guildsListBans.js";
import { guildsListChannels } from "../funcs/guildsListChannels.js";
import { guildsListIntegrations } from "../funcs/guildsListIntegrations.js";
import { guildsListInvites } from "../funcs/guildsListInvites.js";
import { guildsListMembers } from "../funcs/guildsListMembers.js";
import { guildsListRoles } from "../funcs/guildsListRoles.js";
import { guildsListVoiceRegions } from "../funcs/guildsListVoiceRegions.js";
import { guildsPreviewPrune } from "../funcs/guildsPreviewPrune.js";
import { guildsPrune } from "../funcs/guildsPrune.js";
import { guildsRemoveBan } from "../funcs/guildsRemoveBan.js";
import { guildsRemoveMember } from "../funcs/guildsRemoveMember.js";
import { guildsRemoveMemberRole } from "../funcs/guildsRemoveMemberRole.js";
import { guildsSearchMembers } from "../funcs/guildsSearchMembers.js";
import { guildsSetMfaLevel } from "../funcs/guildsSetMfaLevel.js";
import { guildsUpdate } from "../funcs/guildsUpdate.js";
import { guildsUpdateChannelPositions } from "../funcs/guildsUpdateChannelPositions.js";
import { guildsUpdateCurrentMember } from "../funcs/guildsUpdateCurrentMember.js";
import { guildsUpdateMember } from "../funcs/guildsUpdateMember.js";
import { guildsUpdateOnboarding } from "../funcs/guildsUpdateOnboarding.js";
import { guildsUpdateRole } from "../funcs/guildsUpdateRole.js";
import { guildsUpdateRolePositions } from "../funcs/guildsUpdateRolePositions.js";
import { guildsUpdateWelcomeScreen } from "../funcs/guildsUpdateWelcomeScreen.js";
import { guildsUpdateWidgetSettings } from "../funcs/guildsUpdateWidgetSettings.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Guilds extends ClientSDK {
  /**
   * Create a new guild. Returns a guild object on success. Fires a Guild Create Gateway event.
   */
  async create(
    request: components.GuildCreateRequest,
    options?: RequestOptions,
  ): Promise<components.GuildResponse> {
    return unwrapAsync(guildsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of guild member objects whose username or nickname starts with a provided string.
   */
  async searchMembers(
    request: operations.SearchGuildMembersRequest,
    options?: RequestOptions,
  ): Promise<Array<components.GuildMemberResponse>> {
    return unwrapAsync(guildsSearchMembers(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns all active threads in the guild, including public and private threads. Threads are ordered by their id, in descending order.
   */
  async listActiveThreads(
    request: operations.GetActiveGuildThreadsRequest,
    options?: RequestOptions,
  ): Promise<components.ThreadsResponse> {
    return unwrapAsync(guildsListActiveThreads(
      this,
      request,
      options,
    ));
  }

  /**
   * Modifies the current member in a guild. Returns a 200 with the updated member object on success. Fires a Guild Member Update Gateway event.
   */
  async updateCurrentMember(
    request: operations.UpdateMyGuildMemberRequest,
    options?: RequestOptions,
  ): Promise<components.PrivateGuildMemberResponse> {
    return unwrapAsync(guildsUpdateCurrentMember(
      this,
      request,
      options,
    ));
  }

  /**
   * Adds a role to a guild member. Requires the MANAGE_ROLES permission. Returns a 204 empty response on success. Fires a Guild Member Update Gateway event.
   */
  async addMemberRole(
    request: operations.AddGuildMemberRoleRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(guildsAddMemberRole(
      this,
      request,
      options,
    ));
  }

  /**
   * Removes a role from a guild member. Requires the MANAGE_ROLES permission. Returns a 204 empty response on success. Fires a Guild Member Update Gateway event.
   */
  async removeMemberRole(
    request: operations.DeleteGuildMemberRoleRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(guildsRemoveMemberRole(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns the Welcome Screen object for the guild. If the welcome screen is not enabled, the MANAGE_GUILD permission is required.
   */
  async getWelcomeScreen(
    request: operations.GetGuildWelcomeScreenRequest,
    options?: RequestOptions,
  ): Promise<components.GuildWelcomeScreenResponse> {
    return unwrapAsync(guildsGetWelcomeScreen(
      this,
      request,
      options,
    ));
  }

  /**
   * Modify the guild's Welcome Screen. Requires the MANAGE_GUILD permission. Returns the updated Welcome Screen object. May fire a Guild Update Gateway event.
   */
  async updateWelcomeScreen(
    request: operations.UpdateGuildWelcomeScreenRequest,
    options?: RequestOptions,
  ): Promise<components.GuildWelcomeScreenResponse> {
    return unwrapAsync(guildsUpdateWelcomeScreen(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete the attached integration object for the guild. Deletes any associated webhooks and kicks the associated bot if there is one. Requires the MANAGE_GUILD permission. Returns a 204 empty response on success. Fires Guild Integrations Update and Integration Delete Gateway events.
   */
  async deleteIntegration(
    request: operations.DeleteGuildIntegrationRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(guildsDeleteIntegration(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of integration objects for the guild. Requires the MANAGE_GUILD permission.
   */
  async listIntegrations(
    request: operations.ListGuildIntegrationsRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.ListGuildIntegrationsResponseBody>> {
    return unwrapAsync(guildsListIntegrations(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns the widget for the guild. Fires an Invite Create Gateway event when an invite channel is defined and a new Invite is generated.
   */
  async getWidget(
    request: operations.GetGuildWidgetRequest,
    security?: operations.GetGuildWidgetSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.WidgetResponse> {
    return unwrapAsync(guildsGetWidget(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Returns the Onboarding object for the guild.
   */
  async getOnboarding(
    request: operations.GetGuildsOnboardingRequest,
    options?: RequestOptions,
  ): Promise<components.UserGuildOnboardingResponse> {
    return unwrapAsync(guildsGetOnboarding(
      this,
      request,
      options,
    ));
  }

  /**
   * Modifies the onboarding configuration of the guild. Returns a 200 with the Onboarding object for the guild. Requires the MANAGE_GUILD and MANAGE_ROLES permissions.
   */
  async updateOnboarding(
    request: operations.PutGuildsOnboardingRequest,
    options?: RequestOptions,
  ): Promise<components.GuildOnboardingResponse> {
    return unwrapAsync(guildsUpdateOnboarding(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a partial invite object for guilds with that feature enabled. Requires the MANAGE_GUILD permission. code will be null if a vanity url for the guild is not set.
   */
  async getVanityUrl(
    request: operations.GetGuildVanityUrlRequest,
    options?: RequestOptions,
  ): Promise<components.VanityURLResponse> {
    return unwrapAsync(guildsGetVanityUrl(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a PNG image widget for the guild. Requires no permissions or authentication.
   */
  async getWidgetPng(
    request: operations.GetGuildWidgetPngRequest,
    security?: operations.GetGuildWidgetPngSecurity | undefined,
    options?: RequestOptions,
  ): Promise<string> {
    return unwrapAsync(guildsGetWidgetPng(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Ban up to 200 users from a guild, and optionally delete previous messages sent by the banned users. Requires both the BAN_MEMBERS and MANAGE_GUILD permissions. Returns a 200 response on success, including the fields banned_users with the IDs of the banned users and failed_users with IDs that could not be banned or were already banned.
   */
  async bulkBan(
    request: operations.BulkBanUsersFromGuildRequest,
    options?: RequestOptions,
  ): Promise<components.BulkBanUsersResponse> {
    return unwrapAsync(guildsBulkBan(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of guild channel objects. Does not include threads.
   */
  async listChannels(
    security: operations.ListGuildChannelsSecurity,
    request: operations.ListGuildChannelsRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.ListGuildChannelsResponseBody>> {
    return unwrapAsync(guildsListChannels(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Create a new channel object for the guild. Requires the MANAGE_CHANNELS permission. If setting permission overwrites, only permissions your bot has in the guild can be allowed/denied. Setting MANAGE_ROLES permission in channels is only possible for guild administrators. Returns the new channel object on success. Fires a Channel Create Gateway event.
   */
  async createChannel(
    request: operations.CreateGuildChannelRequest,
    options?: RequestOptions,
  ): Promise<components.GuildChannelResponse> {
    return unwrapAsync(guildsCreateChannel(
      this,
      request,
      options,
    ));
  }

  /**
   * Modify the positions of a set of channel objects for the guild. Requires MANAGE_CHANNELS permission. Returns a 204 empty response on success. Fires multiple Channel Update Gateway events.
   */
  async updateChannelPositions(
    request: operations.BulkUpdateGuildChannelsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(guildsUpdateChannelPositions(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a guild member object for the specified user.
   */
  async getMember(
    request: operations.GetGuildMemberRequest,
    options?: RequestOptions,
  ): Promise<components.GuildMemberResponse> {
    return unwrapAsync(guildsGetMember(
      this,
      request,
      options,
    ));
  }

  /**
   * Adds a user to the guild, provided you have a valid oauth2 access token for the user with the guilds.join scope. Returns a 201 Created with the guild member as the body, or 204 No Content if the user is already a member of the guild. Fires a Guild Member Add Gateway event.
   */
  async addMember(
    request: operations.AddGuildMemberRequest,
    options?: RequestOptions,
  ): Promise<components.GuildMemberResponse | undefined> {
    return unwrapAsync(guildsAddMember(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a member from a guild. Requires KICK_MEMBERS permission. Returns a 204 empty response on success. Fires a Guild Member Remove Gateway event.
   */
  async removeMember(
    request: operations.DeleteGuildMemberRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(guildsRemoveMember(
      this,
      request,
      options,
    ));
  }

  /**
   * Modify attributes of a guild member. Returns a 200 OK with the guild member as the body. Fires a Guild Member Update Gateway event. If the channel_id is set to null, this will force the target user to be disconnected from voice.
   */
  async updateMember(
    request: operations.UpdateGuildMemberRequest,
    options?: RequestOptions,
  ): Promise<components.GuildMemberResponse | undefined> {
    return unwrapAsync(guildsUpdateMember(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of guild member objects that are members of the guild.
   */
  async listMembers(
    request: operations.ListGuildMembersRequest,
    options?: RequestOptions,
  ): Promise<Array<components.GuildMemberResponse>> {
    return unwrapAsync(guildsListMembers(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns the guild preview object for the given id. If the user is not in the guild, then the guild must be discoverable.
   */
  async getPreview(
    request: operations.GetGuildPreviewRequest,
    options?: RequestOptions,
  ): Promise<components.GuildPreviewResponse> {
    return unwrapAsync(guildsGetPreview(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of invite objects (with invite metadata) for the guild. Requires the MANAGE_GUILD permission.
   */
  async listInvites(
    request: operations.ListGuildInvitesRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.ListGuildInvitesResponseBody>> {
    return unwrapAsync(guildsListInvites(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of voice region objects for the guild. Unlike the similar /voice route, this returns VIP servers when the guild is VIP-enabled.
   */
  async listVoiceRegions(
    request: operations.ListGuildVoiceRegionsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.VoiceRegionResponse>> {
    return unwrapAsync(guildsListVoiceRegions(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a guild widget settings object. Requires the MANAGE_GUILD permission.
   */
  async getWidgetSettings(
    request: operations.GetGuildWidgetSettingsRequest,
    options?: RequestOptions,
  ): Promise<components.WidgetSettingsResponse> {
    return unwrapAsync(guildsGetWidgetSettings(
      this,
      request,
      options,
    ));
  }

  /**
   * Modify a guild widget settings object for the guild. All attributes may be passed in with JSON and modified. Requires the MANAGE_GUILD permission. Returns the updated guild widget settings object. Fires a Guild Update Gateway event.
   */
  async updateWidgetSettings(
    request: operations.UpdateGuildWidgetSettingsRequest,
    options?: RequestOptions,
  ): Promise<components.WidgetSettingsResponse> {
    return unwrapAsync(guildsUpdateWidgetSettings(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a role object for the specified role.
   */
  async getRole(
    request: operations.GetGuildRoleRequest,
    options?: RequestOptions,
  ): Promise<components.GuildRoleResponse> {
    return unwrapAsync(guildsGetRole(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a guild role. Requires the MANAGE_ROLES permission. Returns a 204 empty response on success. Fires a Guild Role Delete Gateway event.
   */
  async deleteRole(
    request: operations.DeleteGuildRoleRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(guildsDeleteRole(
      this,
      request,
      options,
    ));
  }

  /**
   * Modify a guild role. Requires the MANAGE_ROLES permission. Returns the updated role on success. Fires a Guild Role Update Gateway event.
   */
  async updateRole(
    request: operations.UpdateGuildRoleRequest,
    options?: RequestOptions,
  ): Promise<components.GuildRoleResponse> {
    return unwrapAsync(guildsUpdateRole(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of role objects for the guild.
   */
  async listRoles(
    request: operations.ListGuildRolesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.GuildRoleResponse>> {
    return unwrapAsync(guildsListRoles(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new role for the guild. Requires the MANAGE_ROLES permission. Returns the new role object on success. Fires a Guild Role Create Gateway event. All JSON params are optional.
   */
  async createRole(
    request: operations.CreateGuildRoleRequest,
    options?: RequestOptions,
  ): Promise<components.GuildRoleResponse> {
    return unwrapAsync(guildsCreateRole(
      this,
      request,
      options,
    ));
  }

  /**
   * Modify the positions of a set of role objects for the guild. Requires the MANAGE_ROLES permission. Returns a list of all of the guild's role objects on success. Fires multiple Guild Role Update Gateway events.
   */
  async updateRolePositions(
    request: operations.BulkUpdateGuildRolesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.GuildRoleResponse>> {
    return unwrapAsync(guildsUpdateRolePositions(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns an object with one pruned key indicating the number of members that would be removed in a prune operation. Requires the MANAGE_GUILD and KICK_MEMBERS permissions.
   */
  async previewPrune(
    request: operations.PreviewPruneGuildRequest,
    options?: RequestOptions,
  ): Promise<components.GuildPruneResponse> {
    return unwrapAsync(guildsPreviewPrune(
      this,
      request,
      options,
    ));
  }

  /**
   * Begin a prune operation. Requires the MANAGE_GUILD and KICK_MEMBERS permissions. Returns an object with one pruned key indicating the number of members that were removed in the prune operation. Fires multiple Guild Member Remove Gateway events.
   */
  async prune(
    request: operations.PruneGuildRequest,
    options?: RequestOptions,
  ): Promise<components.GuildPruneResponse> {
    return unwrapAsync(guildsPrune(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a ban object for the given user or a 404 not found if the ban cannot be found. Requires the BAN_MEMBERS permission.
   */
  async getBan(
    request: operations.GetGuildBanRequest,
    options?: RequestOptions,
  ): Promise<components.GuildBanResponse> {
    return unwrapAsync(guildsGetBan(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a guild ban, and optionally delete previous messages sent by the banned user. Requires the BAN_MEMBERS permission. Returns a 204 empty response on success. Fires a Guild Ban Add Gateway event.
   */
  async createBan(
    request: operations.BanUserFromGuildRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(guildsCreateBan(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove the ban for a user. Requires the BAN_MEMBERS permissions. Returns a 204 empty response on success. Fires a Guild Ban Remove Gateway event.
   */
  async removeBan(
    request: operations.UnbanUserFromGuildRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(guildsRemoveBan(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of ban objects for the users banned from this guild. Requires the BAN_MEMBERS permission.
   */
  async listBans(
    request: operations.ListGuildBansRequest,
    options?: RequestOptions,
  ): Promise<Array<components.GuildBanResponse>> {
    return unwrapAsync(guildsListBans(
      this,
      request,
      options,
    ));
  }

  /**
   * Modify a guild's MFA level. Requires guild ownership. Returns the updated level on success. Fires a Guild Update Gateway event.
   */
  async setMfaLevel(
    request: operations.SetGuildMfaLevelRequest,
    options?: RequestOptions,
  ): Promise<components.GuildMFALevelResponse> {
    return unwrapAsync(guildsSetMfaLevel(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns the guild object for the given id. If with_counts is set to true, this endpoint will also return approximate_member_count and approximate_presence_count for the guild.
   */
  async get(
    request: operations.GetGuildRequest,
    options?: RequestOptions,
  ): Promise<components.GuildWithCountsResponse> {
    return unwrapAsync(guildsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a guild permanently. User must be owner. Returns 204 No Content on success. Fires a Guild Delete Gateway event.
   */
  async delete(
    request: operations.DeleteGuildRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(guildsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Modify a guild's settings. Requires the MANAGE_GUILD permission. Returns the updated guild object on success. Fires a Guild Update Gateway event.
   */
  async update(
    request: operations.UpdateGuildRequest,
    options?: RequestOptions,
  ): Promise<components.GuildResponse> {
    return unwrapAsync(guildsUpdate(
      this,
      request,
      options,
    ));
  }
}
