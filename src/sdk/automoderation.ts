/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { autoModerationCreateRule } from "../funcs/autoModerationCreateRule.js";
import { autoModerationDeleteRule } from "../funcs/autoModerationDeleteRule.js";
import { autoModerationGetRule } from "../funcs/autoModerationGetRule.js";
import { autoModerationListRules } from "../funcs/autoModerationListRules.js";
import { autoModerationUpdateRule } from "../funcs/autoModerationUpdateRule.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class AutoModeration extends ClientSDK {
  /**
   * Get a single rule. Returns an auto moderation rule object. This endpoint requires the MANAGE_GUILD permission.
   */
  async getRule(
    request: operations.GetAutoModerationRuleRequest,
    options?: RequestOptions,
  ): Promise<operations.GetAutoModerationRuleResponseBody> {
    return unwrapAsync(autoModerationGetRule(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a rule. Returns a 204 on success. Fires an Auto Moderation Rule Delete Gateway event.
   */
  async deleteRule(
    request: operations.DeleteAutoModerationRuleRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(autoModerationDeleteRule(
      this,
      request,
      options,
    ));
  }

  /**
   * Modify an existing rule. Returns an auto moderation rule on success. Fires an Auto Moderation Rule Update Gateway event.
   */
  async updateRule(
    request: operations.UpdateAutoModerationRuleRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateAutoModerationRuleResponseBody> {
    return unwrapAsync(autoModerationUpdateRule(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a list of all rules currently configured for the guild. Returns a list of auto moderation rule objects for the given guild. This endpoint requires the MANAGE_GUILD permission.
   */
  async listRules(
    request: operations.ListAutoModerationRulesRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.ResponseBody | null>> {
    return unwrapAsync(autoModerationListRules(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new rule. Returns an auto moderation rule on success. Fires an Auto Moderation Rule Create Gateway event.
   */
  async createRule(
    request: operations.CreateAutoModerationRuleRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateAutoModerationRuleResponseBody> {
    return unwrapAsync(autoModerationCreateRule(
      this,
      request,
      options,
    ));
  }
}
