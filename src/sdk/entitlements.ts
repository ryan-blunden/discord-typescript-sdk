/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { entitlementsConsume } from "../funcs/entitlementsConsume.js";
import { entitlementsCreateTest } from "../funcs/entitlementsCreateTest.js";
import { entitlementsDeleteTest } from "../funcs/entitlementsDeleteTest.js";
import { entitlementsGet } from "../funcs/entitlementsGet.js";
import { entitlementsList } from "../funcs/entitlementsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Entitlements extends ClientSDK {
  /**
   * For One-Time Purchase consumable SKUs, marks a given entitlement for the user as consumed. The entitlement will have consumed: true when using List Entitlements. Returns a 204 No Content on success.
   */
  async consume(
    security: operations.ConsumeEntitlementSecurity,
    request: operations.ConsumeEntitlementRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(entitlementsConsume(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Returns an entitlement.
   */
  async get(
    security: operations.GetEntitlementSecurity,
    request: operations.GetEntitlementRequest,
    options?: RequestOptions,
  ): Promise<components.EntitlementResponse> {
    return unwrapAsync(entitlementsGet(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Deletes a currently-active test entitlement. Discord will act as though that user or guild no longer has entitlement to your premium offering. Returns 204 No Content on success.
   */
  async deleteTest(
    security: operations.DeleteEntitlementSecurity,
    request: operations.DeleteEntitlementRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(entitlementsDeleteTest(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Returns all entitlements for a given app, active and expired.
   */
  async list(
    security: operations.GetEntitlementsSecurity,
    request: operations.GetEntitlementsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.EntitlementResponse | null>> {
    return unwrapAsync(entitlementsList(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Creates a test entitlement to a given SKU for a given guild or user. Discord will act as though that user or guild has entitlement to your premium offering. This endpoint returns a partial entitlement object.
   */
  async createTest(
    request: operations.CreateEntitlementRequest,
    options?: RequestOptions,
  ): Promise<components.EntitlementResponse> {
    return unwrapAsync(entitlementsCreateTest(
      this,
      request,
      options,
    ));
  }
}
