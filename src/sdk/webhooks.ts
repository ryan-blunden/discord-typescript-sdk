/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhooksCreate } from "../funcs/webhooksCreate.js";
import { webhooksDelete } from "../funcs/webhooksDelete.js";
import { webhooksDeleteMessage } from "../funcs/webhooksDeleteMessage.js";
import { webhooksDeleteOriginalMessage } from "../funcs/webhooksDeleteOriginalMessage.js";
import { webhooksDeleteWithToken } from "../funcs/webhooksDeleteWithToken.js";
import { webhooksExecuteGithub } from "../funcs/webhooksExecuteGithub.js";
import { webhooksExecuteSlack } from "../funcs/webhooksExecuteSlack.js";
import { webhooksGet } from "../funcs/webhooksGet.js";
import { webhooksGetMessage } from "../funcs/webhooksGetMessage.js";
import { webhooksGetOriginalMessage } from "../funcs/webhooksGetOriginalMessage.js";
import { webhooksGetWithToken } from "../funcs/webhooksGetWithToken.js";
import { webhooksListForChannel } from "../funcs/webhooksListForChannel.js";
import { webhooksListForGuild } from "../funcs/webhooksListForGuild.js";
import { webhooksUpdate } from "../funcs/webhooksUpdate.js";
import { webhooksUpdateMessageForm } from "../funcs/webhooksUpdateMessageForm.js";
import { webhooksUpdateMessageJson } from "../funcs/webhooksUpdateMessageJson.js";
import { webhooksUpdateMessageMultipart } from "../funcs/webhooksUpdateMessageMultipart.js";
import { webhooksUpdateOriginalMessageForm } from "../funcs/webhooksUpdateOriginalMessageForm.js";
import { webhooksUpdateOriginalMessageJson } from "../funcs/webhooksUpdateOriginalMessageJson.js";
import { webhooksUpdateOriginalMessageMultipart } from "../funcs/webhooksUpdateOriginalMessageMultipart.js";
import { webhooksUpdateWithToken } from "../funcs/webhooksUpdateWithToken.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Webhooks extends ClientSDK {
  /**
   * Returns a list of channel webhook objects. Requires the MANAGE_WEBHOOKS permission.
   */
  async listForChannel(
    request: operations.ListChannelWebhooksRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.ListChannelWebhooksResponseBody>> {
    return unwrapAsync(webhooksListForChannel(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates a new webhook and returns a webhook object on success. Requires the MANAGE_WEBHOOKS permission. Fires a Webhooks Update Gateway event.
   */
  async create(
    request: operations.CreateWebhookRequest,
    options?: RequestOptions,
  ): Promise<components.GuildIncomingWebhookResponse> {
    return unwrapAsync(webhooksCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of guild webhook objects. Requires the MANAGE_WEBHOOKS permission.
   */
  async listForGuild(
    request: operations.GetGuildWebhooksRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.GetGuildWebhooksResponseBody>> {
    return unwrapAsync(webhooksListForGuild(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns the new webhook object for the given id.
   */
  async get(
    request: operations.GetWebhookRequest,
    options?: RequestOptions,
  ): Promise<operations.GetWebhookResponseBody> {
    return unwrapAsync(webhooksGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a webhook permanently. Requires the MANAGE_WEBHOOKS permission. Returns a 204 No Content response on success. Fires a Webhooks Update Gateway event.
   */
  async delete(
    request: operations.DeleteWebhookRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(webhooksDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Modify a webhook. Requires the MANAGE_WEBHOOKS permission. Returns the updated webhook object on success. Fires a Webhooks Update Gateway event.
   */
  async update(
    request: operations.UpdateWebhookRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateWebhookResponseBody> {
    return unwrapAsync(webhooksUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Same as above, except this call does not require authentication and returns no user in the webhook object.
   */
  async getWithToken(
    request: operations.GetWebhookByTokenRequest,
    security?: operations.GetWebhookByTokenSecurity | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetWebhookByTokenResponseBody> {
    return unwrapAsync(webhooksGetWithToken(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Same as above, except this call does not require authentication.
   */
  async deleteWithToken(
    request: operations.DeleteWebhookByTokenRequest,
    security?: operations.DeleteWebhookByTokenSecurity | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(webhooksDeleteWithToken(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Same as above, except this call does not require authentication, does not accept a channel_id parameter in the body, and does not return a user in the webhook object.
   */
  async updateWithToken(
    request: operations.UpdateWebhookByTokenRequest,
    security?: operations.UpdateWebhookByTokenSecurity | undefined,
    options?: RequestOptions,
  ): Promise<operations.UpdateWebhookByTokenResponseBody> {
    return unwrapAsync(webhooksUpdateWithToken(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Add a new webhook to your GitHub repo (in the repo's settings), and use this endpoint as the "Payload URL."
   */
  async executeGithub(
    request: operations.ExecuteGithubCompatibleWebhookRequest,
    security?: operations.ExecuteGithubCompatibleWebhookSecurity | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(webhooksExecuteGithub(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Returns the initial webhook message.
   */
  async getOriginalMessage(
    request: operations.GetOriginalWebhookMessageRequest,
    security?: operations.GetOriginalWebhookMessageSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(webhooksGetOriginalMessage(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Deletes the initial webhook message.
   */
  async deleteOriginalMessage(
    request: operations.DeleteOriginalWebhookMessageRequest,
    security?: operations.DeleteOriginalWebhookMessageSecurity | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(webhooksDeleteOriginalMessage(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Edits the initial webhook message.
   */
  async updateOriginalMessageJson(
    request: operations.UpdateOriginalWebhookMessageJsonRequest,
    security?: operations.UpdateOriginalWebhookMessageJsonSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(webhooksUpdateOriginalMessageJson(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Edits the initial webhook message.
   */
  async updateOriginalMessageForm(
    request: operations.UpdateOriginalWebhookMessageFormRequest,
    security?: operations.UpdateOriginalWebhookMessageFormSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(webhooksUpdateOriginalMessageForm(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Edits the initial webhook message.
   */
  async updateOriginalMessageMultipart(
    request: operations.UpdateOriginalWebhookMessageMultipartRequest,
    security?:
      | operations.UpdateOriginalWebhookMessageMultipartSecurity
      | undefined,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(webhooksUpdateOriginalMessageMultipart(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Returns a previously-sent webhook message from the same token. Returns a message object on success.
   */
  async getMessage(
    request: operations.GetWebhookMessageRequest,
    security?: operations.GetWebhookMessageSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(webhooksGetMessage(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Deletes a message that was created by the webhook. Returns a 204 No Content response on success.
   */
  async deleteMessage(
    request: operations.DeleteWebhookMessageRequest,
    security?: operations.DeleteWebhookMessageSecurity | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(webhooksDeleteMessage(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Edits a previously-sent webhook message from the same token. Returns a message object on success.
   */
  async updateMessageJson(
    request: operations.UpdateWebhookMessageJsonRequest,
    security?: operations.UpdateWebhookMessageJsonSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(webhooksUpdateMessageJson(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Edits a previously-sent webhook message from the same token. Returns a message object on success.
   */
  async updateMessageForm(
    request: operations.UpdateWebhookMessageFormRequest,
    security?: operations.UpdateWebhookMessageFormSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(webhooksUpdateMessageForm(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Edits a previously-sent webhook message from the same token. Returns a message object on success.
   */
  async updateMessageMultipart(
    request: operations.UpdateWebhookMessageMultipartRequest,
    security?: operations.UpdateWebhookMessageMultipartSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(webhooksUpdateMessageMultipart(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Refer to Slack's documentation for more information. We do not support Slack's channel, icon_emoji, mrkdwn, or mrkdwn_in properties.
   */
  async executeSlack(
    request: operations.ExecuteSlackCompatibleWebhookRequest,
    security?: operations.ExecuteSlackCompatibleWebhookSecurity | undefined,
    options?: RequestOptions,
  ): Promise<string> {
    return unwrapAsync(webhooksExecuteSlack(
      this,
      request,
      security,
      options,
    ));
  }
}
