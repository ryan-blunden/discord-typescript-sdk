/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { applicationCommandsBulkSet } from "../funcs/applicationCommandsBulkSet.js";
import { applicationCommandsBulkSetGuild } from "../funcs/applicationCommandsBulkSetGuild.js";
import { applicationCommandsCreate } from "../funcs/applicationCommandsCreate.js";
import { applicationCommandsCreateGuild } from "../funcs/applicationCommandsCreateGuild.js";
import { applicationCommandsDelete } from "../funcs/applicationCommandsDelete.js";
import { applicationCommandsDeleteGuild } from "../funcs/applicationCommandsDeleteGuild.js";
import { applicationCommandsGet } from "../funcs/applicationCommandsGet.js";
import { applicationCommandsGetGuild } from "../funcs/applicationCommandsGetGuild.js";
import { applicationCommandsGetGuildPermissions } from "../funcs/applicationCommandsGetGuildPermissions.js";
import { applicationCommandsList } from "../funcs/applicationCommandsList.js";
import { applicationCommandsListGuild } from "../funcs/applicationCommandsListGuild.js";
import { applicationCommandsListGuildPermissions } from "../funcs/applicationCommandsListGuildPermissions.js";
import { applicationCommandsSetGuildPermissions } from "../funcs/applicationCommandsSetGuildPermissions.js";
import { applicationCommandsUpdate } from "../funcs/applicationCommandsUpdate.js";
import { applicationCommandsUpdateGuild } from "../funcs/applicationCommandsUpdateGuild.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ApplicationCommands extends ClientSDK {
  /**
   * Fetches command permissions for all commands for your application in a guild.
   */
  async listGuildPermissions(
    security: operations.ListGuildApplicationCommandPermissionsSecurity,
    request: operations.ListGuildApplicationCommandPermissionsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.CommandPermissionsResponse>> {
    return unwrapAsync(applicationCommandsListGuildPermissions(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Fetches command permissions for a specific command for your application in a guild.
   */
  async getGuildPermissions(
    security: operations.GetGuildApplicationCommandPermissionsSecurity,
    request: operations.GetGuildApplicationCommandPermissionsRequest,
    options?: RequestOptions,
  ): Promise<components.CommandPermissionsResponse> {
    return unwrapAsync(applicationCommandsGetGuildPermissions(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Edits command permissions for a specific command for your application in a guild.
   */
  async setGuildPermissions(
    security: operations.SetGuildApplicationCommandPermissionsSecurity,
    request: operations.SetGuildApplicationCommandPermissionsRequest,
    options?: RequestOptions,
  ): Promise<components.CommandPermissionsResponse> {
    return unwrapAsync(applicationCommandsSetGuildPermissions(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Fetch a guild command for your application.
   */
  async getGuild(
    security: operations.GetGuildApplicationCommandSecurity,
    request: operations.GetGuildApplicationCommandRequest,
    options?: RequestOptions,
  ): Promise<components.ApplicationCommandResponse> {
    return unwrapAsync(applicationCommandsGetGuild(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Delete a guild command.
   */
  async deleteGuild(
    security: operations.DeleteGuildApplicationCommandSecurity,
    request: operations.DeleteGuildApplicationCommandRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(applicationCommandsDeleteGuild(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Edit a guild command. Updates for guild commands will be available immediately.
   */
  async updateGuild(
    security: operations.UpdateGuildApplicationCommandSecurity,
    request: operations.UpdateGuildApplicationCommandRequest,
    options?: RequestOptions,
  ): Promise<components.ApplicationCommandResponse> {
    return unwrapAsync(applicationCommandsUpdateGuild(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Fetch all guild commands for your application for a specific guild.
   */
  async listGuild(
    security: operations.ListGuildApplicationCommandsSecurity,
    request: operations.ListGuildApplicationCommandsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.ApplicationCommandResponse>> {
    return unwrapAsync(applicationCommandsListGuild(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Takes a list of application commands, overwriting the existing command list for this application for the targeted guild.
   */
  async bulkSetGuild(
    security: operations.BulkSetGuildApplicationCommandsSecurity,
    request: operations.BulkSetGuildApplicationCommandsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.ApplicationCommandResponse>> {
    return unwrapAsync(applicationCommandsBulkSetGuild(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Create a new guild command. New guild commands will be available in the guild immediately.
   */
  async createGuild(
    security: operations.CreateGuildApplicationCommandSecurity,
    request: operations.CreateGuildApplicationCommandRequest,
    options?: RequestOptions,
  ): Promise<components.ApplicationCommandResponse> {
    return unwrapAsync(applicationCommandsCreateGuild(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Fetch a global command for your application.
   */
  async get(
    security: operations.GetApplicationCommandSecurity,
    request: operations.GetApplicationCommandRequest,
    options?: RequestOptions,
  ): Promise<components.ApplicationCommandResponse> {
    return unwrapAsync(applicationCommandsGet(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Delete a global command.
   */
  async delete(
    security: operations.DeleteApplicationCommandSecurity,
    request: operations.DeleteApplicationCommandRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(applicationCommandsDelete(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Edit a global command. Updates will be available in all guilds after 1 hour.
   */
  async update(
    security: operations.UpdateApplicationCommandSecurity,
    request: operations.UpdateApplicationCommandRequest,
    options?: RequestOptions,
  ): Promise<components.ApplicationCommandResponse> {
    return unwrapAsync(applicationCommandsUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Fetch all global commands for your application.
   */
  async list(
    security: operations.ListApplicationCommandsSecurity,
    request: operations.ListApplicationCommandsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.ApplicationCommandResponse>> {
    return unwrapAsync(applicationCommandsList(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Takes a list of application commands, overwriting the existing global command list for this application.
   */
  async bulkSet(
    security: operations.BulkSetApplicationCommandsSecurity,
    request: operations.BulkSetApplicationCommandsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.ApplicationCommandResponse>> {
    return unwrapAsync(applicationCommandsBulkSet(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Create a new global command. New global commands will be available in all guilds after 1 hour.
   */
  async create(
    security: operations.CreateApplicationCommandSecurity,
    request: operations.CreateApplicationCommandRequest,
    options?: RequestOptions,
  ): Promise<components.ApplicationCommandResponse> {
    return unwrapAsync(applicationCommandsCreate(
      this,
      security,
      request,
      options,
    ));
  }
}
