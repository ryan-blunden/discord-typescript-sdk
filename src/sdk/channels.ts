/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { channelsAddGroupDMRecipient } from "../funcs/channelsAddGroupDMRecipient.js";
import { channelsAddThreadMember } from "../funcs/channelsAddThreadMember.js";
import { channelsCreateInvite } from "../funcs/channelsCreateInvite.js";
import { channelsDelete } from "../funcs/channelsDelete.js";
import { channelsDeletePermissionOverwrite } from "../funcs/channelsDeletePermissionOverwrite.js";
import { channelsFollow } from "../funcs/channelsFollow.js";
import { channelsGet } from "../funcs/channelsGet.js";
import { channelsGetThreadMember } from "../funcs/channelsGetThreadMember.js";
import { channelsJoinThread } from "../funcs/channelsJoinThread.js";
import { channelsLeaveThread } from "../funcs/channelsLeaveThread.js";
import { channelsListInvites } from "../funcs/channelsListInvites.js";
import { channelsListJoinedPrivateArchivedThreads } from "../funcs/channelsListJoinedPrivateArchivedThreads.js";
import { channelsListPinnedMessages } from "../funcs/channelsListPinnedMessages.js";
import { channelsListPrivateArchivedThreads } from "../funcs/channelsListPrivateArchivedThreads.js";
import { channelsListPublicArchivedThreads } from "../funcs/channelsListPublicArchivedThreads.js";
import { channelsListThreadMembers } from "../funcs/channelsListThreadMembers.js";
import { channelsPinMessage } from "../funcs/channelsPinMessage.js";
import { channelsRemoveGroupDMRecipient } from "../funcs/channelsRemoveGroupDMRecipient.js";
import { channelsRemoveThreadMember } from "../funcs/channelsRemoveThreadMember.js";
import { channelsSearchThreads } from "../funcs/channelsSearchThreads.js";
import { channelsSetPermissionOverwrite } from "../funcs/channelsSetPermissionOverwrite.js";
import { channelsStartThread } from "../funcs/channelsStartThread.js";
import { channelsStartThreadFromMessage } from "../funcs/channelsStartThreadFromMessage.js";
import { channelsTriggerTypingIndicator } from "../funcs/channelsTriggerTypingIndicator.js";
import { channelsUnpinMessage } from "../funcs/channelsUnpinMessage.js";
import { channelsUpdate } from "../funcs/channelsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Channels extends ClientSDK {
  /**
   * Returns a channel object for the given channel ID.
   */
  async get(
    request: operations.GetChannelRequest,
    options?: RequestOptions,
  ): Promise<operations.GetChannelResponseBody> {
    return unwrapAsync(channelsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a channel, or close a private message. Requires the MANAGE_CHANNELS permission for the guild, or MANAGE_THREADS if the channel is a thread. Returns a channel object on success. Fires a Channel Delete Gateway event (or Thread Delete if the channel was a thread).
   */
  async delete(
    request: operations.DeleteChannelRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteChannelResponseBody> {
    return unwrapAsync(channelsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a channel's settings. Returns a channel on success, and a 400 BAD REQUEST on invalid parameters.
   */
  async update(
    request: operations.UpdateChannelRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateChannelResponseBody> {
    return unwrapAsync(channelsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Follow an Announcement Channel to send messages to a target channel. Requires the MANAGE_WEBHOOKS permission in the target channel. Returns a followed channel object. Fires a Webhooks Update Gateway event for the target channel.
   */
  async follow(
    request: operations.FollowChannelRequest,
    options?: RequestOptions,
  ): Promise<components.ChannelFollowerResponse> {
    return unwrapAsync(channelsFollow(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of invite objects (with invite metadata) for the channel.
   */
  async listInvites(
    request: operations.ListChannelInvitesRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.ResponseBody>> {
    return unwrapAsync(channelsListInvites(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new invite object for the channel.
   */
  async createInvite(
    request: operations.CreateChannelInviteRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateChannelInviteResponseBody | undefined> {
    return unwrapAsync(channelsCreateInvite(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates a new thread from an existing message. Returns a channel on success, and a 400 BAD REQUEST on invalid parameters. Fires a Thread Create and a Message Update Gateway event.
   */
  async startThreadFromMessage(
    request: operations.CreateThreadFromMessageRequest,
    options?: RequestOptions,
  ): Promise<components.ThreadResponse> {
    return unwrapAsync(channelsStartThreadFromMessage(
      this,
      request,
      options,
    ));
  }

  /**
   * Edit the channel permission overwrites for a user or role in a channel. Only usable for guild channels. Requires the MANAGE_ROLES permission. Returns a 204 empty response on success. Fires a Channel Update Gateway event.
   */
  async setPermissionOverwrite(
    request: operations.SetChannelPermissionOverwriteRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(channelsSetPermissionOverwrite(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a channel permission overwrite for a user or role in a channel. Only usable for guild channels. Requires the MANAGE_ROLES permission. Returns a 204 empty response on success. Fires a Channel Update Gateway event.
   */
  async deletePermissionOverwrite(
    request: operations.DeleteChannelPermissionOverwriteRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(channelsDeletePermissionOverwrite(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns all pinned messages in the channel as an array of message objects.
   */
  async listPinnedMessages(
    request: operations.DeprecatedListPinsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.MessageResponse>> {
    return unwrapAsync(channelsListPinnedMessages(
      this,
      request,
      options,
    ));
  }

  /**
   * Pin a message in a channel. Requires the MANAGE_MESSAGES permission. Returns a 204 empty response on success. Fires a Channel Pins Update Gateway event.
   */
  async pinMessage(
    request: operations.DeprecatedCreatePinRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(channelsPinMessage(
      this,
      request,
      options,
    ));
  }

  /**
   * Unpin a message in a channel. Requires the MANAGE_MESSAGES permission. Returns a 204 empty response on success. Fires a Channel Pins Update Gateway event.
   */
  async unpinMessage(
    request: operations.DeprecatedDeletePinRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(channelsUnpinMessage(
      this,
      request,
      options,
    ));
  }

  /**
   * Adds a recipient to a Group DM using their access token.
   */
  async addGroupDMRecipient(
    request: operations.AddGroupDmUserRequest,
    options?: RequestOptions,
  ): Promise<operations.AddGroupDmUserResponseBody | undefined> {
    return unwrapAsync(channelsAddGroupDMRecipient(
      this,
      request,
      options,
    ));
  }

  /**
   * Removes a recipient from a Group DM.
   */
  async removeGroupDMRecipient(
    request: operations.DeleteGroupDmUserRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(channelsRemoveGroupDMRecipient(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns array of thread member objects that are members of the thread.
   */
  async listThreadMembers(
    request: operations.ListThreadMembersRequest,
    options?: RequestOptions,
  ): Promise<Array<components.ThreadMemberResponse>> {
    return unwrapAsync(channelsListThreadMembers(
      this,
      request,
      options,
    ));
  }

  /**
   * Adds the current user to a thread. Also requires the thread is not archived. Returns a 204 empty response on success. Fires a Thread Members Update and a Thread Create Gateway event.
   */
  async joinThread(
    request: operations.JoinThreadRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(channelsJoinThread(
      this,
      request,
      options,
    ));
  }

  /**
   * Removes the current user from a thread. Also requires the thread is not archived. Returns a 204 empty response on success. Fires a Thread Members Update Gateway event.
   */
  async leaveThread(
    request: operations.LeaveThreadRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(channelsLeaveThread(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a thread member object for the specified user if they are a member of the thread, returns a 404 response otherwise.
   */
  async getThreadMember(
    request: operations.GetThreadMemberRequest,
    options?: RequestOptions,
  ): Promise<components.ThreadMemberResponse> {
    return unwrapAsync(channelsGetThreadMember(
      this,
      request,
      options,
    ));
  }

  /**
   * Adds another member to a thread. Requires the ability to send messages in the thread. Also requires the thread is not archived. Returns a 204 empty response if the member is successfully added or was already a member of the thread. Fires a Thread Members Update Gateway event.
   */
  async addThreadMember(
    request: operations.AddThreadMemberRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(channelsAddThreadMember(
      this,
      request,
      options,
    ));
  }

  /**
   * Removes another member from a thread. Requires the MANAGE_THREADS permission, or the creator of the thread if it is a PRIVATE_THREAD. Also requires the thread is not archived. Returns a 204 empty response on success. Fires a Thread Members Update Gateway event.
   */
  async removeThreadMember(
    request: operations.DeleteThreadMemberRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(channelsRemoveThreadMember(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates a new thread that is not connected to an existing message. Returns a channel on success, and a 400 BAD REQUEST on invalid parameters. Fires a Thread Create Gateway event.
   */
  async startThread(
    request: operations.CreateThreadRequest,
    options?: RequestOptions,
  ): Promise<components.CreatedThreadResponse> {
    return unwrapAsync(channelsStartThread(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns archived threads in the channel that are of type PRIVATE_THREAD. Threads are ordered by archive_timestamp, in descending order. Requires both the READ_MESSAGE_HISTORY and MANAGE_THREADS permissions.
   */
  async listPrivateArchivedThreads(
    request: operations.ListPrivateArchivedThreadsRequest,
    options?: RequestOptions,
  ): Promise<components.ThreadsResponse> {
    return unwrapAsync(channelsListPrivateArchivedThreads(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns archived threads in the channel that are public. When called on a GUILD_TEXT channel, returns threads of type PUBLIC_THREAD. When called on a GUILD_ANNOUNCEMENT channel returns threads of type ANNOUNCEMENT_THREAD. Threads are ordered by archive_timestamp, in descending order. Requires the READ_MESSAGE_HISTORY permission.
   */
  async listPublicArchivedThreads(
    request: operations.ListPublicArchivedThreadsRequest,
    options?: RequestOptions,
  ): Promise<components.ThreadsResponse> {
    return unwrapAsync(channelsListPublicArchivedThreads(
      this,
      request,
      options,
    ));
  }

  /**
   * Search for threads in a channel.
   */
  async searchThreads(
    request: operations.ThreadSearchRequest,
    options?: RequestOptions,
  ): Promise<components.ThreadSearchResponse> {
    return unwrapAsync(channelsSearchThreads(
      this,
      request,
      options,
    ));
  }

  /**
   * Post a typing indicator for the specified channel, which expires after 10 seconds. Returns a 204 empty response on success. Fires a Typing Start Gateway event.
   */
  async triggerTypingIndicator(
    request: operations.TriggerTypingIndicatorRequest,
    options?: RequestOptions,
  ): Promise<components.TypingIndicatorResponse | undefined> {
    return unwrapAsync(channelsTriggerTypingIndicator(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns archived threads in the channel that are of type PRIVATE_THREAD, and the user has joined. Threads are ordered by their id, in descending order. Requires the READ_MESSAGE_HISTORY permission.
   */
  async listJoinedPrivateArchivedThreads(
    request: operations.ListMyPrivateArchivedThreadsRequest,
    options?: RequestOptions,
  ): Promise<components.ThreadsResponse> {
    return unwrapAsync(channelsListJoinedPrivateArchivedThreads(
      this,
      request,
      options,
    ));
  }
}
