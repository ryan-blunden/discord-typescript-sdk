/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClientSDK } from "../lib/sdks.js";
import { ApplicationCommands } from "./applicationcommands.js";
import { ApplicationRoleConnectionMetadata } from "./applicationroleconnectionmetadata.js";
import { Applications } from "./applications.js";
import { AuditLogs } from "./auditlogs.js";
import { AutoModeration } from "./automoderation.js";
import { Channels } from "./channels.js";
import { Emoji } from "./emoji.js";
import { Entitlements } from "./entitlements.js";
import { Guilds } from "./guilds.js";
import { GuildScheduledEvents } from "./guildscheduledevents.js";
import { GuildTemplates } from "./guildtemplates.js";
import { Invites } from "./invites.js";
import { Lobbies } from "./lobbies.js";
import { Messages } from "./messages.js";
import { Polls } from "./polls.js";
import { Soundboards } from "./soundboards.js";
import { StageInstances } from "./stageinstances.js";
import { Stickers } from "./stickers.js";
import { Users } from "./users.js";
import { Voice } from "./voice.js";
import { Webhooks } from "./webhooks.js";

export class Discord extends ClientSDK {
  private _applications?: Applications;
  get applications(): Applications {
    return (this._applications ??= new Applications(this._options));
  }

  private _users?: Users;
  get users(): Users {
    return (this._users ??= new Users(this._options));
  }

  private _voice?: Voice;
  get voice(): Voice {
    return (this._voice ??= new Voice(this._options));
  }

  private _soundboards?: Soundboards;
  get soundboards(): Soundboards {
    return (this._soundboards ??= new Soundboards(this._options));
  }

  private _stageInstances?: StageInstances;
  get stageInstances(): StageInstances {
    return (this._stageInstances ??= new StageInstances(this._options));
  }

  private _stickers?: Stickers;
  get stickers(): Stickers {
    return (this._stickers ??= new Stickers(this._options));
  }

  private _lobbies?: Lobbies;
  get lobbies(): Lobbies {
    return (this._lobbies ??= new Lobbies(this._options));
  }

  private _guilds?: Guilds;
  get guilds(): Guilds {
    return (this._guilds ??= new Guilds(this._options));
  }

  private _channels?: Channels;
  get channels(): Channels {
    return (this._channels ??= new Channels(this._options));
  }

  private _applicationCommands?: ApplicationCommands;
  get applicationCommands(): ApplicationCommands {
    return (this._applicationCommands ??= new ApplicationCommands(
      this._options,
    ));
  }

  private _messages?: Messages;
  get messages(): Messages {
    return (this._messages ??= new Messages(this._options));
  }

  private _applicationRoleConnectionMetadata?:
    ApplicationRoleConnectionMetadata;
  get applicationRoleConnectionMetadata(): ApplicationRoleConnectionMetadata {
    return (this._applicationRoleConnectionMetadata ??=
      new ApplicationRoleConnectionMetadata(this._options));
  }

  private _entitlements?: Entitlements;
  get entitlements(): Entitlements {
    return (this._entitlements ??= new Entitlements(this._options));
  }

  private _polls?: Polls;
  get polls(): Polls {
    return (this._polls ??= new Polls(this._options));
  }

  private _webhooks?: Webhooks;
  get webhooks(): Webhooks {
    return (this._webhooks ??= new Webhooks(this._options));
  }

  private _guildScheduledEvents?: GuildScheduledEvents;
  get guildScheduledEvents(): GuildScheduledEvents {
    return (this._guildScheduledEvents ??= new GuildScheduledEvents(
      this._options,
    ));
  }

  private _autoModeration?: AutoModeration;
  get autoModeration(): AutoModeration {
    return (this._autoModeration ??= new AutoModeration(this._options));
  }

  private _emoji?: Emoji;
  get emoji(): Emoji {
    return (this._emoji ??= new Emoji(this._options));
  }

  private _guildTemplates?: GuildTemplates;
  get guildTemplates(): GuildTemplates {
    return (this._guildTemplates ??= new GuildTemplates(this._options));
  }

  private _auditLogs?: AuditLogs;
  get auditLogs(): AuditLogs {
    return (this._auditLogs ??= new AuditLogs(this._options));
  }

  private _invites?: Invites;
  get invites(): Invites {
    return (this._invites ??= new Invites(this._options));
  }
}
