/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { usersCreateDM } from "../funcs/usersCreateDM.js";
import { usersGet } from "../funcs/usersGet.js";
import { usersGetApplicationRoleConnection } from "../funcs/usersGetApplicationRoleConnection.js";
import { usersGetCurrent } from "../funcs/usersGetCurrent.js";
import { usersGetGuildMember } from "../funcs/usersGetGuildMember.js";
import { usersLeaveGuild } from "../funcs/usersLeaveGuild.js";
import { usersListConnections } from "../funcs/usersListConnections.js";
import { usersListGuilds } from "../funcs/usersListGuilds.js";
import { usersUpdateApplicationRoleConnection } from "../funcs/usersUpdateApplicationRoleConnection.js";
import { usersUpdateCurrent } from "../funcs/usersUpdateCurrent.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Users extends ClientSDK {
  /**
   * Returns a list of connection objects. Requires the connections OAuth2 scope.
   */
  async listConnections(
    security: operations.ListMyConnectionsSecurity,
    options?: RequestOptions,
  ): Promise<Array<components.ConnectedAccountResponse>> {
    return unwrapAsync(usersListConnections(
      this,
      security,
      options,
    ));
  }

  /**
   * Create a new DM channel with a user. Returns a DM channel object (if one already exists, it will be returned instead).
   */
  async createDM(
    request: components.CreatePrivateChannelRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateDmResponseBody> {
    return unwrapAsync(usersCreateDM(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of partial guild objects the current user is a member of. For OAuth2, requires the guilds scope.
   */
  async listGuilds(
    security: operations.ListMyGuildsSecurity,
    request: operations.ListMyGuildsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.MyGuildResponse>> {
    return unwrapAsync(usersListGuilds(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Returns the user object of the requester's account. For OAuth2, this requires the identify scope, which will return the object without an email, and optionally the email scope, which returns the object with an email if the user has one.
   */
  async getCurrent(
    security: operations.GetMyUserSecurity,
    options?: RequestOptions,
  ): Promise<components.UserPIIResponse> {
    return unwrapAsync(usersGetCurrent(
      this,
      security,
      options,
    ));
  }

  /**
   * Modify the requester's user account settings. Returns a user object on success. Fires a User Update Gateway event.
   */
  async updateCurrent(
    request: components.BotAccountPatchRequest,
    options?: RequestOptions,
  ): Promise<components.UserPIIResponse> {
    return unwrapAsync(usersUpdateCurrent(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns the application role connection for the user. Requires an OAuth2 access token with role_connections.write scope for the application specified in the path.
   */
  async getApplicationRoleConnection(
    request: operations.GetApplicationUserRoleConnectionRequest,
    options?: RequestOptions,
  ): Promise<components.ApplicationUserRoleConnectionResponse> {
    return unwrapAsync(usersGetApplicationRoleConnection(
      this,
      request,
      options,
    ));
  }

  /**
   * Updates and returns the application role connection for the user. Requires an OAuth2 access token with role_connections.write scope for the application specified in the path.
   */
  async updateApplicationRoleConnection(
    request: operations.UpdateApplicationUserRoleConnectionRequest,
    options?: RequestOptions,
  ): Promise<components.ApplicationUserRoleConnectionResponse> {
    return unwrapAsync(usersUpdateApplicationRoleConnection(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a guild member object for the current user. Requires the guilds.members.read OAuth2 scope.
   */
  async getGuildMember(
    request: operations.GetMyGuildMemberRequest,
    options?: RequestOptions,
  ): Promise<components.PrivateGuildMemberResponse> {
    return unwrapAsync(usersGetGuildMember(
      this,
      request,
      options,
    ));
  }

  /**
   * Leave a guild. Returns a 204 empty response on success. Fires a Guild Delete Gateway event and a Guild Member Remove Gateway event.
   */
  async leaveGuild(
    request: operations.LeaveGuildRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(usersLeaveGuild(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a user object for a given user ID.
   */
  async get(
    request: operations.GetUserRequest,
    options?: RequestOptions,
  ): Promise<components.UserResponse> {
    return unwrapAsync(usersGet(
      this,
      request,
      options,
    ));
  }
}
