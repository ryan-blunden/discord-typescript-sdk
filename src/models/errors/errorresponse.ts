/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";
import { DiscordError } from "./discorderror.js";

/**
 * Errors object returned by the Discord API
 */
export type ErrorResponseData = {
  /**
   * Discord internal error code. See error code reference
   */
  code: number;
  /**
   * Human-readable error message
   */
  message: string;
  errors?: components.ErrorDetails | undefined;
};

/**
 * Errors object returned by the Discord API
 */
export class ErrorResponse extends DiscordError {
  /**
   * Discord internal error code. See error code reference
   */
  code: number;
  errors?: components.ErrorDetails | undefined;

  /** The original data that was passed to this error instance. */
  data$: ErrorResponseData;

  constructor(
    err: ErrorResponseData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.errors != null) this.errors = err.errors;

    this.name = "ErrorResponse";
  }
}

/** @internal */
export const ErrorResponse$inboundSchema: z.ZodType<
  ErrorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.number().int(),
  message: z.string(),
  errors: components.ErrorDetails$inboundSchema.optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ErrorResponse(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ErrorResponse$Outbound = {
  code: number;
  message: string;
  errors?: components.ErrorDetails$Outbound | undefined;
};

/** @internal */
export const ErrorResponse$outboundSchema: z.ZodType<
  ErrorResponse$Outbound,
  z.ZodTypeDef,
  ErrorResponse
> = z.instanceof(ErrorResponse)
  .transform(v => v.data$)
  .pipe(z.object({
    code: z.number().int(),
    message: z.string(),
    errors: components.ErrorDetails$outboundSchema.optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorResponse$ {
  /** @deprecated use `ErrorResponse$inboundSchema` instead. */
  export const inboundSchema = ErrorResponse$inboundSchema;
  /** @deprecated use `ErrorResponse$outboundSchema` instead. */
  export const outboundSchema = ErrorResponse$outboundSchema;
  /** @deprecated use `ErrorResponse$Outbound` instead. */
  export type Outbound = ErrorResponse$Outbound;
}
