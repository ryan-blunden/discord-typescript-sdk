/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SeparatorComponentResponse = {
  type?: 1 | undefined;
  id: number;
  spacing?: 1 | undefined;
  divider: boolean;
};

/** @internal */
export const SeparatorComponentResponse$inboundSchema: z.ZodType<
  SeparatorComponentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal(1).optional(),
  id: z.number().int(),
  spacing: z.literal(1).optional(),
  divider: z.boolean(),
});

/** @internal */
export type SeparatorComponentResponse$Outbound = {
  type: 1;
  id: number;
  spacing: 1;
  divider: boolean;
};

/** @internal */
export const SeparatorComponentResponse$outboundSchema: z.ZodType<
  SeparatorComponentResponse$Outbound,
  z.ZodTypeDef,
  SeparatorComponentResponse
> = z.object({
  type: z.literal(1).default(1 as const),
  id: z.number().int(),
  spacing: z.literal(1).default(1 as const),
  divider: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SeparatorComponentResponse$ {
  /** @deprecated use `SeparatorComponentResponse$inboundSchema` instead. */
  export const inboundSchema = SeparatorComponentResponse$inboundSchema;
  /** @deprecated use `SeparatorComponentResponse$outboundSchema` instead. */
  export const outboundSchema = SeparatorComponentResponse$outboundSchema;
  /** @deprecated use `SeparatorComponentResponse$Outbound` instead. */
  export type Outbound = SeparatorComponentResponse$Outbound;
}

export function separatorComponentResponseToJSON(
  separatorComponentResponse: SeparatorComponentResponse,
): string {
  return JSON.stringify(
    SeparatorComponentResponse$outboundSchema.parse(separatorComponentResponse),
  );
}

export function separatorComponentResponseFromJSON(
  jsonString: string,
): SafeParseResult<SeparatorComponentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SeparatorComponentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SeparatorComponentResponse' from JSON`,
  );
}
