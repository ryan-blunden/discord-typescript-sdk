/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ActionRowComponentForMessageRequest,
  ActionRowComponentForMessageRequest$inboundSchema,
  ActionRowComponentForMessageRequest$Outbound,
  ActionRowComponentForMessageRequest$outboundSchema,
} from "./actionrowcomponentformessagerequest.js";
import {
  ConfettiPotionCreateRequest,
  ConfettiPotionCreateRequest$inboundSchema,
  ConfettiPotionCreateRequest$Outbound,
  ConfettiPotionCreateRequest$outboundSchema,
} from "./confettipotioncreaterequest.js";
import {
  ContainerComponentForMessageRequest,
  ContainerComponentForMessageRequest$inboundSchema,
  ContainerComponentForMessageRequest$Outbound,
  ContainerComponentForMessageRequest$outboundSchema,
} from "./containercomponentformessagerequest.js";
import {
  FileComponentForMessageRequest,
  FileComponentForMessageRequest$inboundSchema,
  FileComponentForMessageRequest$Outbound,
  FileComponentForMessageRequest$outboundSchema,
} from "./filecomponentformessagerequest.js";
import {
  MediaGalleryComponentForMessageRequest,
  MediaGalleryComponentForMessageRequest$inboundSchema,
  MediaGalleryComponentForMessageRequest$Outbound,
  MediaGalleryComponentForMessageRequest$outboundSchema,
} from "./mediagallerycomponentformessagerequest.js";
import {
  MessageAllowedMentionsRequest,
  MessageAllowedMentionsRequest$inboundSchema,
  MessageAllowedMentionsRequest$Outbound,
  MessageAllowedMentionsRequest$outboundSchema,
} from "./messageallowedmentionsrequest.js";
import {
  MessageAttachmentRequest,
  MessageAttachmentRequest$inboundSchema,
  MessageAttachmentRequest$Outbound,
  MessageAttachmentRequest$outboundSchema,
} from "./messageattachmentrequest.js";
import {
  MessageReferenceRequest,
  MessageReferenceRequest$inboundSchema,
  MessageReferenceRequest$Outbound,
  MessageReferenceRequest$outboundSchema,
} from "./messagereferencerequest.js";
import {
  PollCreateRequest,
  PollCreateRequest$inboundSchema,
  PollCreateRequest$Outbound,
  PollCreateRequest$outboundSchema,
} from "./pollcreaterequest.js";
import {
  RichEmbed,
  RichEmbed$inboundSchema,
  RichEmbed$Outbound,
  RichEmbed$outboundSchema,
} from "./richembed.js";
import {
  SectionComponentForMessageRequest,
  SectionComponentForMessageRequest$inboundSchema,
  SectionComponentForMessageRequest$Outbound,
  SectionComponentForMessageRequest$outboundSchema,
} from "./sectioncomponentformessagerequest.js";
import {
  SeparatorComponentForMessageRequest,
  SeparatorComponentForMessageRequest$inboundSchema,
  SeparatorComponentForMessageRequest$Outbound,
  SeparatorComponentForMessageRequest$outboundSchema,
} from "./separatorcomponentformessagerequest.js";
import {
  TextDisplayComponentForMessageRequest,
  TextDisplayComponentForMessageRequest$inboundSchema,
  TextDisplayComponentForMessageRequest$Outbound,
  TextDisplayComponentForMessageRequest$outboundSchema,
} from "./textdisplaycomponentformessagerequest.js";

export type MessageCreateRequestComponents =
  | ActionRowComponentForMessageRequest
  | MediaGalleryComponentForMessageRequest
  | TextDisplayComponentForMessageRequest
  | FileComponentForMessageRequest
  | SectionComponentForMessageRequest
  | SeparatorComponentForMessageRequest
  | ContainerComponentForMessageRequest;

export type MessageCreateRequestNonce = number | string;

export type MessageCreateRequest = {
  content?: string | null | undefined;
  embeds?: Array<RichEmbed> | null | undefined;
  allowedMentions?: MessageAllowedMentionsRequest | null | undefined;
  stickerIds?: Array<string> | null | undefined;
  components?:
    | Array<
      | ActionRowComponentForMessageRequest
      | MediaGalleryComponentForMessageRequest
      | TextDisplayComponentForMessageRequest
      | FileComponentForMessageRequest
      | SectionComponentForMessageRequest
      | SeparatorComponentForMessageRequest
      | ContainerComponentForMessageRequest
    >
    | null
    | undefined;
  flags?: number | null | undefined;
  attachments?: Array<MessageAttachmentRequest> | null | undefined;
  poll?: PollCreateRequest | null | undefined;
  confettiPotion?: ConfettiPotionCreateRequest | null | undefined;
  messageReference?: MessageReferenceRequest | null | undefined;
  nonce?: number | string | null | undefined;
  enforceNonce?: boolean | null | undefined;
  tts?: boolean | null | undefined;
};

/** @internal */
export const MessageCreateRequestComponents$inboundSchema: z.ZodType<
  MessageCreateRequestComponents,
  z.ZodTypeDef,
  unknown
> = z.union([
  ActionRowComponentForMessageRequest$inboundSchema,
  MediaGalleryComponentForMessageRequest$inboundSchema,
  TextDisplayComponentForMessageRequest$inboundSchema,
  FileComponentForMessageRequest$inboundSchema,
  SectionComponentForMessageRequest$inboundSchema,
  SeparatorComponentForMessageRequest$inboundSchema,
  ContainerComponentForMessageRequest$inboundSchema,
]);

/** @internal */
export type MessageCreateRequestComponents$Outbound =
  | ActionRowComponentForMessageRequest$Outbound
  | MediaGalleryComponentForMessageRequest$Outbound
  | TextDisplayComponentForMessageRequest$Outbound
  | FileComponentForMessageRequest$Outbound
  | SectionComponentForMessageRequest$Outbound
  | SeparatorComponentForMessageRequest$Outbound
  | ContainerComponentForMessageRequest$Outbound;

/** @internal */
export const MessageCreateRequestComponents$outboundSchema: z.ZodType<
  MessageCreateRequestComponents$Outbound,
  z.ZodTypeDef,
  MessageCreateRequestComponents
> = z.union([
  ActionRowComponentForMessageRequest$outboundSchema,
  MediaGalleryComponentForMessageRequest$outboundSchema,
  TextDisplayComponentForMessageRequest$outboundSchema,
  FileComponentForMessageRequest$outboundSchema,
  SectionComponentForMessageRequest$outboundSchema,
  SeparatorComponentForMessageRequest$outboundSchema,
  ContainerComponentForMessageRequest$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageCreateRequestComponents$ {
  /** @deprecated use `MessageCreateRequestComponents$inboundSchema` instead. */
  export const inboundSchema = MessageCreateRequestComponents$inboundSchema;
  /** @deprecated use `MessageCreateRequestComponents$outboundSchema` instead. */
  export const outboundSchema = MessageCreateRequestComponents$outboundSchema;
  /** @deprecated use `MessageCreateRequestComponents$Outbound` instead. */
  export type Outbound = MessageCreateRequestComponents$Outbound;
}

export function messageCreateRequestComponentsToJSON(
  messageCreateRequestComponents: MessageCreateRequestComponents,
): string {
  return JSON.stringify(
    MessageCreateRequestComponents$outboundSchema.parse(
      messageCreateRequestComponents,
    ),
  );
}

export function messageCreateRequestComponentsFromJSON(
  jsonString: string,
): SafeParseResult<MessageCreateRequestComponents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageCreateRequestComponents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageCreateRequestComponents' from JSON`,
  );
}

/** @internal */
export const MessageCreateRequestNonce$inboundSchema: z.ZodType<
  MessageCreateRequestNonce,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.string()]);

/** @internal */
export type MessageCreateRequestNonce$Outbound = number | string;

/** @internal */
export const MessageCreateRequestNonce$outboundSchema: z.ZodType<
  MessageCreateRequestNonce$Outbound,
  z.ZodTypeDef,
  MessageCreateRequestNonce
> = z.union([z.number().int(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageCreateRequestNonce$ {
  /** @deprecated use `MessageCreateRequestNonce$inboundSchema` instead. */
  export const inboundSchema = MessageCreateRequestNonce$inboundSchema;
  /** @deprecated use `MessageCreateRequestNonce$outboundSchema` instead. */
  export const outboundSchema = MessageCreateRequestNonce$outboundSchema;
  /** @deprecated use `MessageCreateRequestNonce$Outbound` instead. */
  export type Outbound = MessageCreateRequestNonce$Outbound;
}

export function messageCreateRequestNonceToJSON(
  messageCreateRequestNonce: MessageCreateRequestNonce,
): string {
  return JSON.stringify(
    MessageCreateRequestNonce$outboundSchema.parse(messageCreateRequestNonce),
  );
}

export function messageCreateRequestNonceFromJSON(
  jsonString: string,
): SafeParseResult<MessageCreateRequestNonce, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageCreateRequestNonce$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageCreateRequestNonce' from JSON`,
  );
}

/** @internal */
export const MessageCreateRequest$inboundSchema: z.ZodType<
  MessageCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.string()).optional(),
  embeds: z.nullable(z.array(RichEmbed$inboundSchema)).optional(),
  allowed_mentions: z.nullable(MessageAllowedMentionsRequest$inboundSchema)
    .optional(),
  sticker_ids: z.nullable(z.array(z.string())).optional(),
  components: z.nullable(
    z.array(
      z.union([
        ActionRowComponentForMessageRequest$inboundSchema,
        MediaGalleryComponentForMessageRequest$inboundSchema,
        TextDisplayComponentForMessageRequest$inboundSchema,
        FileComponentForMessageRequest$inboundSchema,
        SectionComponentForMessageRequest$inboundSchema,
        SeparatorComponentForMessageRequest$inboundSchema,
        ContainerComponentForMessageRequest$inboundSchema,
      ]),
    ),
  ).optional(),
  flags: z.nullable(z.number().int()).optional(),
  attachments: z.nullable(z.array(MessageAttachmentRequest$inboundSchema))
    .optional(),
  poll: z.nullable(PollCreateRequest$inboundSchema).optional(),
  confetti_potion: z.nullable(ConfettiPotionCreateRequest$inboundSchema)
    .optional(),
  message_reference: z.nullable(MessageReferenceRequest$inboundSchema)
    .optional(),
  nonce: z.nullable(z.union([z.number().int(), z.string()])).optional(),
  enforce_nonce: z.nullable(z.boolean()).optional(),
  tts: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "allowed_mentions": "allowedMentions",
    "sticker_ids": "stickerIds",
    "confetti_potion": "confettiPotion",
    "message_reference": "messageReference",
    "enforce_nonce": "enforceNonce",
  });
});

/** @internal */
export type MessageCreateRequest$Outbound = {
  content?: string | null | undefined;
  embeds?: Array<RichEmbed$Outbound> | null | undefined;
  allowed_mentions?: MessageAllowedMentionsRequest$Outbound | null | undefined;
  sticker_ids?: Array<string> | null | undefined;
  components?:
    | Array<
      | ActionRowComponentForMessageRequest$Outbound
      | MediaGalleryComponentForMessageRequest$Outbound
      | TextDisplayComponentForMessageRequest$Outbound
      | FileComponentForMessageRequest$Outbound
      | SectionComponentForMessageRequest$Outbound
      | SeparatorComponentForMessageRequest$Outbound
      | ContainerComponentForMessageRequest$Outbound
    >
    | null
    | undefined;
  flags?: number | null | undefined;
  attachments?: Array<MessageAttachmentRequest$Outbound> | null | undefined;
  poll?: PollCreateRequest$Outbound | null | undefined;
  confetti_potion?: ConfettiPotionCreateRequest$Outbound | null | undefined;
  message_reference?: MessageReferenceRequest$Outbound | null | undefined;
  nonce?: number | string | null | undefined;
  enforce_nonce?: boolean | null | undefined;
  tts?: boolean | null | undefined;
};

/** @internal */
export const MessageCreateRequest$outboundSchema: z.ZodType<
  MessageCreateRequest$Outbound,
  z.ZodTypeDef,
  MessageCreateRequest
> = z.object({
  content: z.nullable(z.string()).optional(),
  embeds: z.nullable(z.array(RichEmbed$outboundSchema)).optional(),
  allowedMentions: z.nullable(MessageAllowedMentionsRequest$outboundSchema)
    .optional(),
  stickerIds: z.nullable(z.array(z.string())).optional(),
  components: z.nullable(
    z.array(
      z.union([
        ActionRowComponentForMessageRequest$outboundSchema,
        MediaGalleryComponentForMessageRequest$outboundSchema,
        TextDisplayComponentForMessageRequest$outboundSchema,
        FileComponentForMessageRequest$outboundSchema,
        SectionComponentForMessageRequest$outboundSchema,
        SeparatorComponentForMessageRequest$outboundSchema,
        ContainerComponentForMessageRequest$outboundSchema,
      ]),
    ),
  ).optional(),
  flags: z.nullable(z.number().int()).optional(),
  attachments: z.nullable(z.array(MessageAttachmentRequest$outboundSchema))
    .optional(),
  poll: z.nullable(PollCreateRequest$outboundSchema).optional(),
  confettiPotion: z.nullable(ConfettiPotionCreateRequest$outboundSchema)
    .optional(),
  messageReference: z.nullable(MessageReferenceRequest$outboundSchema)
    .optional(),
  nonce: z.nullable(z.union([z.number().int(), z.string()])).optional(),
  enforceNonce: z.nullable(z.boolean()).optional(),
  tts: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    allowedMentions: "allowed_mentions",
    stickerIds: "sticker_ids",
    confettiPotion: "confetti_potion",
    messageReference: "message_reference",
    enforceNonce: "enforce_nonce",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageCreateRequest$ {
  /** @deprecated use `MessageCreateRequest$inboundSchema` instead. */
  export const inboundSchema = MessageCreateRequest$inboundSchema;
  /** @deprecated use `MessageCreateRequest$outboundSchema` instead. */
  export const outboundSchema = MessageCreateRequest$outboundSchema;
  /** @deprecated use `MessageCreateRequest$Outbound` instead. */
  export type Outbound = MessageCreateRequest$Outbound;
}

export function messageCreateRequestToJSON(
  messageCreateRequest: MessageCreateRequest,
): string {
  return JSON.stringify(
    MessageCreateRequest$outboundSchema.parse(messageCreateRequest),
  );
}

export function messageCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<MessageCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageCreateRequest' from JSON`,
  );
}
