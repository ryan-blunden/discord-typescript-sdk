/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UserNameplateResponse = {
  skuId?: string | null | undefined;
  asset?: string | null | undefined;
  label?: string | null | undefined;
  palette?: string | null | undefined;
};

/** @internal */
export const UserNameplateResponse$inboundSchema: z.ZodType<
  UserNameplateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sku_id: z.nullable(z.string()).optional(),
  asset: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  palette: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "sku_id": "skuId",
  });
});

/** @internal */
export type UserNameplateResponse$Outbound = {
  sku_id?: string | null | undefined;
  asset?: string | null | undefined;
  label?: string | null | undefined;
  palette?: string | null | undefined;
};

/** @internal */
export const UserNameplateResponse$outboundSchema: z.ZodType<
  UserNameplateResponse$Outbound,
  z.ZodTypeDef,
  UserNameplateResponse
> = z.object({
  skuId: z.nullable(z.string()).optional(),
  asset: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  palette: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    skuId: "sku_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserNameplateResponse$ {
  /** @deprecated use `UserNameplateResponse$inboundSchema` instead. */
  export const inboundSchema = UserNameplateResponse$inboundSchema;
  /** @deprecated use `UserNameplateResponse$outboundSchema` instead. */
  export const outboundSchema = UserNameplateResponse$outboundSchema;
  /** @deprecated use `UserNameplateResponse$Outbound` instead. */
  export type Outbound = UserNameplateResponse$Outbound;
}

export function userNameplateResponseToJSON(
  userNameplateResponse: UserNameplateResponse,
): string {
  return JSON.stringify(
    UserNameplateResponse$outboundSchema.parse(userNameplateResponse),
  );
}

export function userNameplateResponseFromJSON(
  jsonString: string,
): SafeParseResult<UserNameplateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserNameplateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserNameplateResponse' from JSON`,
  );
}
