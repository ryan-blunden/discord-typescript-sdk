/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MessageResponse,
  MessageResponse$inboundSchema,
  MessageResponse$Outbound,
  MessageResponse$outboundSchema,
} from "./messageresponse.js";
import {
  ThreadMemberResponse,
  ThreadMemberResponse$inboundSchema,
  ThreadMemberResponse$Outbound,
  ThreadMemberResponse$outboundSchema,
} from "./threadmemberresponse.js";
import {
  ThreadResponse,
  ThreadResponse$inboundSchema,
  ThreadResponse$Outbound,
  ThreadResponse$outboundSchema,
} from "./threadresponse.js";

export type ThreadSearchResponse = {
  threads: Array<ThreadResponse>;
  members: Array<ThreadMemberResponse>;
  hasMore?: boolean | null | undefined;
  firstMessages?: Array<MessageResponse> | null | undefined;
  totalResults?: number | null | undefined;
};

/** @internal */
export const ThreadSearchResponse$inboundSchema: z.ZodType<
  ThreadSearchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  threads: z.array(ThreadResponse$inboundSchema),
  members: z.array(ThreadMemberResponse$inboundSchema),
  has_more: z.nullable(z.boolean()).optional(),
  first_messages: z.nullable(z.array(MessageResponse$inboundSchema)).optional(),
  total_results: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
    "first_messages": "firstMessages",
    "total_results": "totalResults",
  });
});

/** @internal */
export type ThreadSearchResponse$Outbound = {
  threads: Array<ThreadResponse$Outbound>;
  members: Array<ThreadMemberResponse$Outbound>;
  has_more?: boolean | null | undefined;
  first_messages?: Array<MessageResponse$Outbound> | null | undefined;
  total_results?: number | null | undefined;
};

/** @internal */
export const ThreadSearchResponse$outboundSchema: z.ZodType<
  ThreadSearchResponse$Outbound,
  z.ZodTypeDef,
  ThreadSearchResponse
> = z.object({
  threads: z.array(ThreadResponse$outboundSchema),
  members: z.array(ThreadMemberResponse$outboundSchema),
  hasMore: z.nullable(z.boolean()).optional(),
  firstMessages: z.nullable(z.array(MessageResponse$outboundSchema)).optional(),
  totalResults: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
    firstMessages: "first_messages",
    totalResults: "total_results",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreadSearchResponse$ {
  /** @deprecated use `ThreadSearchResponse$inboundSchema` instead. */
  export const inboundSchema = ThreadSearchResponse$inboundSchema;
  /** @deprecated use `ThreadSearchResponse$outboundSchema` instead. */
  export const outboundSchema = ThreadSearchResponse$outboundSchema;
  /** @deprecated use `ThreadSearchResponse$Outbound` instead. */
  export type Outbound = ThreadSearchResponse$Outbound;
}

export function threadSearchResponseToJSON(
  threadSearchResponse: ThreadSearchResponse,
): string {
  return JSON.stringify(
    ThreadSearchResponse$outboundSchema.parse(threadSearchResponse),
  );
}

export function threadSearchResponseFromJSON(
  jsonString: string,
): SafeParseResult<ThreadSearchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ThreadSearchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ThreadSearchResponse' from JSON`,
  );
}
