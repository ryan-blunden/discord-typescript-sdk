/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserResponse,
  UserResponse$inboundSchema,
  UserResponse$Outbound,
  UserResponse$outboundSchema,
} from "./userresponse.js";

export type LobbyMessageResponse = {
  id: string;
  type?: 0 | undefined;
  content: string;
  lobbyId: string;
  channelId: string;
  author: UserResponse;
  metadata?: { [k: string]: string } | null | undefined;
  flags: number;
  applicationId?: string | null | undefined;
};

/** @internal */
export const LobbyMessageResponse$inboundSchema: z.ZodType<
  LobbyMessageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: z.literal(0).optional(),
  content: z.string(),
  lobby_id: z.string(),
  channel_id: z.string(),
  author: UserResponse$inboundSchema,
  metadata: z.nullable(z.record(z.string())).optional(),
  flags: z.number().int(),
  application_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "lobby_id": "lobbyId",
    "channel_id": "channelId",
    "application_id": "applicationId",
  });
});

/** @internal */
export type LobbyMessageResponse$Outbound = {
  id: string;
  type: 0;
  content: string;
  lobby_id: string;
  channel_id: string;
  author: UserResponse$Outbound;
  metadata?: { [k: string]: string } | null | undefined;
  flags: number;
  application_id?: string | null | undefined;
};

/** @internal */
export const LobbyMessageResponse$outboundSchema: z.ZodType<
  LobbyMessageResponse$Outbound,
  z.ZodTypeDef,
  LobbyMessageResponse
> = z.object({
  id: z.string(),
  type: z.literal(0).default(0 as const),
  content: z.string(),
  lobbyId: z.string(),
  channelId: z.string(),
  author: UserResponse$outboundSchema,
  metadata: z.nullable(z.record(z.string())).optional(),
  flags: z.number().int(),
  applicationId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    lobbyId: "lobby_id",
    channelId: "channel_id",
    applicationId: "application_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LobbyMessageResponse$ {
  /** @deprecated use `LobbyMessageResponse$inboundSchema` instead. */
  export const inboundSchema = LobbyMessageResponse$inboundSchema;
  /** @deprecated use `LobbyMessageResponse$outboundSchema` instead. */
  export const outboundSchema = LobbyMessageResponse$outboundSchema;
  /** @deprecated use `LobbyMessageResponse$Outbound` instead. */
  export type Outbound = LobbyMessageResponse$Outbound;
}

export function lobbyMessageResponseToJSON(
  lobbyMessageResponse: LobbyMessageResponse,
): string {
  return JSON.stringify(
    LobbyMessageResponse$outboundSchema.parse(lobbyMessageResponse),
  );
}

export function lobbyMessageResponseFromJSON(
  jsonString: string,
): SafeParseResult<LobbyMessageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LobbyMessageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LobbyMessageResponse' from JSON`,
  );
}
