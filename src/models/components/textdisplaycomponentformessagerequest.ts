/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TextDisplayComponentForMessageRequest = {
  type?: 1 | undefined;
  content: string;
};

/** @internal */
export const TextDisplayComponentForMessageRequest$inboundSchema: z.ZodType<
  TextDisplayComponentForMessageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal(1).optional(),
  content: z.string(),
});

/** @internal */
export type TextDisplayComponentForMessageRequest$Outbound = {
  type: 1;
  content: string;
};

/** @internal */
export const TextDisplayComponentForMessageRequest$outboundSchema: z.ZodType<
  TextDisplayComponentForMessageRequest$Outbound,
  z.ZodTypeDef,
  TextDisplayComponentForMessageRequest
> = z.object({
  type: z.literal(1).default(1 as const),
  content: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextDisplayComponentForMessageRequest$ {
  /** @deprecated use `TextDisplayComponentForMessageRequest$inboundSchema` instead. */
  export const inboundSchema =
    TextDisplayComponentForMessageRequest$inboundSchema;
  /** @deprecated use `TextDisplayComponentForMessageRequest$outboundSchema` instead. */
  export const outboundSchema =
    TextDisplayComponentForMessageRequest$outboundSchema;
  /** @deprecated use `TextDisplayComponentForMessageRequest$Outbound` instead. */
  export type Outbound = TextDisplayComponentForMessageRequest$Outbound;
}

export function textDisplayComponentForMessageRequestToJSON(
  textDisplayComponentForMessageRequest: TextDisplayComponentForMessageRequest,
): string {
  return JSON.stringify(
    TextDisplayComponentForMessageRequest$outboundSchema.parse(
      textDisplayComponentForMessageRequest,
    ),
  );
}

export function textDisplayComponentForMessageRequestFromJSON(
  jsonString: string,
): SafeParseResult<TextDisplayComponentForMessageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TextDisplayComponentForMessageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TextDisplayComponentForMessageRequest' from JSON`,
  );
}
