/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChannelTypes,
  ChannelTypes$inboundSchema,
  ChannelTypes$outboundSchema,
} from "./channeltypes.js";
import {
  InviteChannelRecipientResponse,
  InviteChannelRecipientResponse$inboundSchema,
  InviteChannelRecipientResponse$Outbound,
  InviteChannelRecipientResponse$outboundSchema,
} from "./invitechannelrecipientresponse.js";

export type InviteChannelResponse = {
  id: string;
  /**
   * Channel types (1: DM, 3: GROUP_DM, 0: GUILD_TEXT, 2: GUILD_VOICE, 4: GUILD_CATEGORY, 5: GUILD_ANNOUNCEMENT, 7: UNKNOWN, 10: ANNOUNCEMENT_THREAD, 11: PUBLIC_THREAD, 12: PRIVATE_THREAD, 13: GUILD_STAGE_VOICE, 14: GUILD_DIRECTORY, 15: GUILD_FORUM)
   */
  type: ChannelTypes;
  name?: string | null | undefined;
  icon?: string | null | undefined;
  recipients?: Array<InviteChannelRecipientResponse> | null | undefined;
};

/** @internal */
export const InviteChannelResponse$inboundSchema: z.ZodType<
  InviteChannelResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: ChannelTypes$inboundSchema,
  name: z.nullable(z.string()).optional(),
  icon: z.nullable(z.string()).optional(),
  recipients: z.nullable(z.array(InviteChannelRecipientResponse$inboundSchema))
    .optional(),
});

/** @internal */
export type InviteChannelResponse$Outbound = {
  id: string;
  type: number;
  name?: string | null | undefined;
  icon?: string | null | undefined;
  recipients?:
    | Array<InviteChannelRecipientResponse$Outbound>
    | null
    | undefined;
};

/** @internal */
export const InviteChannelResponse$outboundSchema: z.ZodType<
  InviteChannelResponse$Outbound,
  z.ZodTypeDef,
  InviteChannelResponse
> = z.object({
  id: z.string(),
  type: ChannelTypes$outboundSchema,
  name: z.nullable(z.string()).optional(),
  icon: z.nullable(z.string()).optional(),
  recipients: z.nullable(z.array(InviteChannelRecipientResponse$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InviteChannelResponse$ {
  /** @deprecated use `InviteChannelResponse$inboundSchema` instead. */
  export const inboundSchema = InviteChannelResponse$inboundSchema;
  /** @deprecated use `InviteChannelResponse$outboundSchema` instead. */
  export const outboundSchema = InviteChannelResponse$outboundSchema;
  /** @deprecated use `InviteChannelResponse$Outbound` instead. */
  export type Outbound = InviteChannelResponse$Outbound;
}

export function inviteChannelResponseToJSON(
  inviteChannelResponse: InviteChannelResponse,
): string {
  return JSON.stringify(
    InviteChannelResponse$outboundSchema.parse(inviteChannelResponse),
  );
}

export function inviteChannelResponseFromJSON(
  jsonString: string,
): SafeParseResult<InviteChannelResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InviteChannelResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InviteChannelResponse' from JSON`,
  );
}
