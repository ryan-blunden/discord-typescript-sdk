/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UnfurledMediaResponse = {
  id: string;
  url: string;
  proxyUrl: string;
  width?: number | null | undefined;
  height?: number | null | undefined;
  contentType?: string | null | undefined;
  attachmentId?: string | null | undefined;
};

/** @internal */
export const UnfurledMediaResponse$inboundSchema: z.ZodType<
  UnfurledMediaResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  url: z.string(),
  proxy_url: z.string(),
  width: z.nullable(z.number().int()).optional(),
  height: z.nullable(z.number().int()).optional(),
  content_type: z.nullable(z.string()).optional(),
  attachment_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "proxy_url": "proxyUrl",
    "content_type": "contentType",
    "attachment_id": "attachmentId",
  });
});

/** @internal */
export type UnfurledMediaResponse$Outbound = {
  id: string;
  url: string;
  proxy_url: string;
  width?: number | null | undefined;
  height?: number | null | undefined;
  content_type?: string | null | undefined;
  attachment_id?: string | null | undefined;
};

/** @internal */
export const UnfurledMediaResponse$outboundSchema: z.ZodType<
  UnfurledMediaResponse$Outbound,
  z.ZodTypeDef,
  UnfurledMediaResponse
> = z.object({
  id: z.string(),
  url: z.string(),
  proxyUrl: z.string(),
  width: z.nullable(z.number().int()).optional(),
  height: z.nullable(z.number().int()).optional(),
  contentType: z.nullable(z.string()).optional(),
  attachmentId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    proxyUrl: "proxy_url",
    contentType: "content_type",
    attachmentId: "attachment_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnfurledMediaResponse$ {
  /** @deprecated use `UnfurledMediaResponse$inboundSchema` instead. */
  export const inboundSchema = UnfurledMediaResponse$inboundSchema;
  /** @deprecated use `UnfurledMediaResponse$outboundSchema` instead. */
  export const outboundSchema = UnfurledMediaResponse$outboundSchema;
  /** @deprecated use `UnfurledMediaResponse$Outbound` instead. */
  export type Outbound = UnfurledMediaResponse$Outbound;
}

export function unfurledMediaResponseToJSON(
  unfurledMediaResponse: UnfurledMediaResponse,
): string {
  return JSON.stringify(
    UnfurledMediaResponse$outboundSchema.parse(unfurledMediaResponse),
  );
}

export function unfurledMediaResponseFromJSON(
  jsonString: string,
): SafeParseResult<UnfurledMediaResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnfurledMediaResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnfurledMediaResponse' from JSON`,
  );
}
