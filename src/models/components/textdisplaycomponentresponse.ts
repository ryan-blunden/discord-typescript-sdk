/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TextDisplayComponentResponse = {
  type?: 1 | undefined;
  id: number;
  content: string;
};

/** @internal */
export const TextDisplayComponentResponse$inboundSchema: z.ZodType<
  TextDisplayComponentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal(1).optional(),
  id: z.number().int(),
  content: z.string(),
});

/** @internal */
export type TextDisplayComponentResponse$Outbound = {
  type: 1;
  id: number;
  content: string;
};

/** @internal */
export const TextDisplayComponentResponse$outboundSchema: z.ZodType<
  TextDisplayComponentResponse$Outbound,
  z.ZodTypeDef,
  TextDisplayComponentResponse
> = z.object({
  type: z.literal(1).default(1 as const),
  id: z.number().int(),
  content: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextDisplayComponentResponse$ {
  /** @deprecated use `TextDisplayComponentResponse$inboundSchema` instead. */
  export const inboundSchema = TextDisplayComponentResponse$inboundSchema;
  /** @deprecated use `TextDisplayComponentResponse$outboundSchema` instead. */
  export const outboundSchema = TextDisplayComponentResponse$outboundSchema;
  /** @deprecated use `TextDisplayComponentResponse$Outbound` instead. */
  export type Outbound = TextDisplayComponentResponse$Outbound;
}

export function textDisplayComponentResponseToJSON(
  textDisplayComponentResponse: TextDisplayComponentResponse,
): string {
  return JSON.stringify(
    TextDisplayComponentResponse$outboundSchema.parse(
      textDisplayComponentResponse,
    ),
  );
}

export function textDisplayComponentResponseFromJSON(
  jsonString: string,
): SafeParseResult<TextDisplayComponentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TextDisplayComponentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TextDisplayComponentResponse' from JSON`,
  );
}
