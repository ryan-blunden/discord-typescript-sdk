/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ProvisionalTokenResponse = {
  tokenType: string;
  accessToken: string;
  expiresIn: number;
  scope: string;
  idToken: string;
  refreshToken?: string | null | undefined;
  scopes?: Array<string> | null | undefined;
  expiresAtS?: number | null | undefined;
};

/** @internal */
export const ProvisionalTokenResponse$inboundSchema: z.ZodType<
  ProvisionalTokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  token_type: z.string(),
  access_token: z.string(),
  expires_in: z.number().int(),
  scope: z.string(),
  id_token: z.string(),
  refresh_token: z.nullable(z.string()).optional(),
  scopes: z.nullable(z.array(z.string())).optional(),
  expires_at_s: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "token_type": "tokenType",
    "access_token": "accessToken",
    "expires_in": "expiresIn",
    "id_token": "idToken",
    "refresh_token": "refreshToken",
    "expires_at_s": "expiresAtS",
  });
});

/** @internal */
export type ProvisionalTokenResponse$Outbound = {
  token_type: string;
  access_token: string;
  expires_in: number;
  scope: string;
  id_token: string;
  refresh_token?: string | null | undefined;
  scopes?: Array<string> | null | undefined;
  expires_at_s?: number | null | undefined;
};

/** @internal */
export const ProvisionalTokenResponse$outboundSchema: z.ZodType<
  ProvisionalTokenResponse$Outbound,
  z.ZodTypeDef,
  ProvisionalTokenResponse
> = z.object({
  tokenType: z.string(),
  accessToken: z.string(),
  expiresIn: z.number().int(),
  scope: z.string(),
  idToken: z.string(),
  refreshToken: z.nullable(z.string()).optional(),
  scopes: z.nullable(z.array(z.string())).optional(),
  expiresAtS: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    tokenType: "token_type",
    accessToken: "access_token",
    expiresIn: "expires_in",
    idToken: "id_token",
    refreshToken: "refresh_token",
    expiresAtS: "expires_at_s",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProvisionalTokenResponse$ {
  /** @deprecated use `ProvisionalTokenResponse$inboundSchema` instead. */
  export const inboundSchema = ProvisionalTokenResponse$inboundSchema;
  /** @deprecated use `ProvisionalTokenResponse$outboundSchema` instead. */
  export const outboundSchema = ProvisionalTokenResponse$outboundSchema;
  /** @deprecated use `ProvisionalTokenResponse$Outbound` instead. */
  export type Outbound = ProvisionalTokenResponse$Outbound;
}

export function provisionalTokenResponseToJSON(
  provisionalTokenResponse: ProvisionalTokenResponse,
): string {
  return JSON.stringify(
    ProvisionalTokenResponse$outboundSchema.parse(provisionalTokenResponse),
  );
}

export function provisionalTokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<ProvisionalTokenResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProvisionalTokenResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProvisionalTokenResponse' from JSON`,
  );
}
