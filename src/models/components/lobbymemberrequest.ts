/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Flags = {
  One: 1,
} as const;
export type Flags = ClosedEnum<typeof Flags>;

export type LobbyMemberRequest = {
  id: string;
  metadata?: { [k: string]: string } | null | undefined;
  flags?: Flags | null | undefined;
};

/** @internal */
export const Flags$inboundSchema: z.ZodNativeEnum<typeof Flags> = z.nativeEnum(
  Flags,
);

/** @internal */
export const Flags$outboundSchema: z.ZodNativeEnum<typeof Flags> =
  Flags$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Flags$ {
  /** @deprecated use `Flags$inboundSchema` instead. */
  export const inboundSchema = Flags$inboundSchema;
  /** @deprecated use `Flags$outboundSchema` instead. */
  export const outboundSchema = Flags$outboundSchema;
}

/** @internal */
export const LobbyMemberRequest$inboundSchema: z.ZodType<
  LobbyMemberRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  metadata: z.nullable(z.record(z.string())).optional(),
  flags: z.nullable(Flags$inboundSchema).optional(),
});

/** @internal */
export type LobbyMemberRequest$Outbound = {
  id: string;
  metadata?: { [k: string]: string } | null | undefined;
  flags?: number | null | undefined;
};

/** @internal */
export const LobbyMemberRequest$outboundSchema: z.ZodType<
  LobbyMemberRequest$Outbound,
  z.ZodTypeDef,
  LobbyMemberRequest
> = z.object({
  id: z.string(),
  metadata: z.nullable(z.record(z.string())).optional(),
  flags: z.nullable(Flags$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LobbyMemberRequest$ {
  /** @deprecated use `LobbyMemberRequest$inboundSchema` instead. */
  export const inboundSchema = LobbyMemberRequest$inboundSchema;
  /** @deprecated use `LobbyMemberRequest$outboundSchema` instead. */
  export const outboundSchema = LobbyMemberRequest$outboundSchema;
  /** @deprecated use `LobbyMemberRequest$Outbound` instead. */
  export type Outbound = LobbyMemberRequest$Outbound;
}

export function lobbyMemberRequestToJSON(
  lobbyMemberRequest: LobbyMemberRequest,
): string {
  return JSON.stringify(
    LobbyMemberRequest$outboundSchema.parse(lobbyMemberRequest),
  );
}

export function lobbyMemberRequestFromJSON(
  jsonString: string,
): SafeParseResult<LobbyMemberRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LobbyMemberRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LobbyMemberRequest' from JSON`,
  );
}
