/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UnfurledMediaRequest = {
  url: string;
};

/** @internal */
export const UnfurledMediaRequest$inboundSchema: z.ZodType<
  UnfurledMediaRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
});

/** @internal */
export type UnfurledMediaRequest$Outbound = {
  url: string;
};

/** @internal */
export const UnfurledMediaRequest$outboundSchema: z.ZodType<
  UnfurledMediaRequest$Outbound,
  z.ZodTypeDef,
  UnfurledMediaRequest
> = z.object({
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnfurledMediaRequest$ {
  /** @deprecated use `UnfurledMediaRequest$inboundSchema` instead. */
  export const inboundSchema = UnfurledMediaRequest$inboundSchema;
  /** @deprecated use `UnfurledMediaRequest$outboundSchema` instead. */
  export const outboundSchema = UnfurledMediaRequest$outboundSchema;
  /** @deprecated use `UnfurledMediaRequest$Outbound` instead. */
  export type Outbound = UnfurledMediaRequest$Outbound;
}

export function unfurledMediaRequestToJSON(
  unfurledMediaRequest: UnfurledMediaRequest,
): string {
  return JSON.stringify(
    UnfurledMediaRequest$outboundSchema.parse(unfurledMediaRequest),
  );
}

export function unfurledMediaRequestFromJSON(
  jsonString: string,
): SafeParseResult<UnfurledMediaRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnfurledMediaRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnfurledMediaRequest' from JSON`,
  );
}
