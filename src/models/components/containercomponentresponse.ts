/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ActionRowComponentResponse,
  ActionRowComponentResponse$inboundSchema,
  ActionRowComponentResponse$Outbound,
  ActionRowComponentResponse$outboundSchema,
} from "./actionrowcomponentresponse.js";
import {
  FileComponentResponse,
  FileComponentResponse$inboundSchema,
  FileComponentResponse$Outbound,
  FileComponentResponse$outboundSchema,
} from "./filecomponentresponse.js";
import {
  MediaGalleryComponentResponse,
  MediaGalleryComponentResponse$inboundSchema,
  MediaGalleryComponentResponse$Outbound,
  MediaGalleryComponentResponse$outboundSchema,
} from "./mediagallerycomponentresponse.js";
import {
  SectionComponentResponse,
  SectionComponentResponse$inboundSchema,
  SectionComponentResponse$Outbound,
  SectionComponentResponse$outboundSchema,
} from "./sectioncomponentresponse.js";
import {
  SeparatorComponentResponse,
  SeparatorComponentResponse$inboundSchema,
  SeparatorComponentResponse$Outbound,
  SeparatorComponentResponse$outboundSchema,
} from "./separatorcomponentresponse.js";
import {
  TextDisplayComponentResponse,
  TextDisplayComponentResponse$inboundSchema,
  TextDisplayComponentResponse$Outbound,
  TextDisplayComponentResponse$outboundSchema,
} from "./textdisplaycomponentresponse.js";

export type ContainerComponentResponseComponents =
  | ActionRowComponentResponse
  | MediaGalleryComponentResponse
  | TextDisplayComponentResponse
  | SectionComponentResponse
  | SeparatorComponentResponse
  | FileComponentResponse;

export type ContainerComponentResponse = {
  type?: 1 | undefined;
  id: number;
  accentColor?: number | null | undefined;
  components: Array<
    | ActionRowComponentResponse
    | MediaGalleryComponentResponse
    | TextDisplayComponentResponse
    | SectionComponentResponse
    | SeparatorComponentResponse
    | FileComponentResponse
  >;
  spoiler: boolean;
};

/** @internal */
export const ContainerComponentResponseComponents$inboundSchema: z.ZodType<
  ContainerComponentResponseComponents,
  z.ZodTypeDef,
  unknown
> = z.union([
  ActionRowComponentResponse$inboundSchema,
  MediaGalleryComponentResponse$inboundSchema,
  TextDisplayComponentResponse$inboundSchema,
  SectionComponentResponse$inboundSchema,
  SeparatorComponentResponse$inboundSchema,
  FileComponentResponse$inboundSchema,
]);

/** @internal */
export type ContainerComponentResponseComponents$Outbound =
  | ActionRowComponentResponse$Outbound
  | MediaGalleryComponentResponse$Outbound
  | TextDisplayComponentResponse$Outbound
  | SectionComponentResponse$Outbound
  | SeparatorComponentResponse$Outbound
  | FileComponentResponse$Outbound;

/** @internal */
export const ContainerComponentResponseComponents$outboundSchema: z.ZodType<
  ContainerComponentResponseComponents$Outbound,
  z.ZodTypeDef,
  ContainerComponentResponseComponents
> = z.union([
  ActionRowComponentResponse$outboundSchema,
  MediaGalleryComponentResponse$outboundSchema,
  TextDisplayComponentResponse$outboundSchema,
  SectionComponentResponse$outboundSchema,
  SeparatorComponentResponse$outboundSchema,
  FileComponentResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContainerComponentResponseComponents$ {
  /** @deprecated use `ContainerComponentResponseComponents$inboundSchema` instead. */
  export const inboundSchema =
    ContainerComponentResponseComponents$inboundSchema;
  /** @deprecated use `ContainerComponentResponseComponents$outboundSchema` instead. */
  export const outboundSchema =
    ContainerComponentResponseComponents$outboundSchema;
  /** @deprecated use `ContainerComponentResponseComponents$Outbound` instead. */
  export type Outbound = ContainerComponentResponseComponents$Outbound;
}

export function containerComponentResponseComponentsToJSON(
  containerComponentResponseComponents: ContainerComponentResponseComponents,
): string {
  return JSON.stringify(
    ContainerComponentResponseComponents$outboundSchema.parse(
      containerComponentResponseComponents,
    ),
  );
}

export function containerComponentResponseComponentsFromJSON(
  jsonString: string,
): SafeParseResult<ContainerComponentResponseComponents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ContainerComponentResponseComponents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContainerComponentResponseComponents' from JSON`,
  );
}

/** @internal */
export const ContainerComponentResponse$inboundSchema: z.ZodType<
  ContainerComponentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal(1).optional(),
  id: z.number().int(),
  accent_color: z.nullable(z.number().int()).optional(),
  components: z.array(
    z.union([
      ActionRowComponentResponse$inboundSchema,
      MediaGalleryComponentResponse$inboundSchema,
      TextDisplayComponentResponse$inboundSchema,
      SectionComponentResponse$inboundSchema,
      SeparatorComponentResponse$inboundSchema,
      FileComponentResponse$inboundSchema,
    ]),
  ),
  spoiler: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "accent_color": "accentColor",
  });
});

/** @internal */
export type ContainerComponentResponse$Outbound = {
  type: 1;
  id: number;
  accent_color?: number | null | undefined;
  components: Array<
    | ActionRowComponentResponse$Outbound
    | MediaGalleryComponentResponse$Outbound
    | TextDisplayComponentResponse$Outbound
    | SectionComponentResponse$Outbound
    | SeparatorComponentResponse$Outbound
    | FileComponentResponse$Outbound
  >;
  spoiler: boolean;
};

/** @internal */
export const ContainerComponentResponse$outboundSchema: z.ZodType<
  ContainerComponentResponse$Outbound,
  z.ZodTypeDef,
  ContainerComponentResponse
> = z.object({
  type: z.literal(1).default(1 as const),
  id: z.number().int(),
  accentColor: z.nullable(z.number().int()).optional(),
  components: z.array(
    z.union([
      ActionRowComponentResponse$outboundSchema,
      MediaGalleryComponentResponse$outboundSchema,
      TextDisplayComponentResponse$outboundSchema,
      SectionComponentResponse$outboundSchema,
      SeparatorComponentResponse$outboundSchema,
      FileComponentResponse$outboundSchema,
    ]),
  ),
  spoiler: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    accentColor: "accent_color",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContainerComponentResponse$ {
  /** @deprecated use `ContainerComponentResponse$inboundSchema` instead. */
  export const inboundSchema = ContainerComponentResponse$inboundSchema;
  /** @deprecated use `ContainerComponentResponse$outboundSchema` instead. */
  export const outboundSchema = ContainerComponentResponse$outboundSchema;
  /** @deprecated use `ContainerComponentResponse$Outbound` instead. */
  export type Outbound = ContainerComponentResponse$Outbound;
}

export function containerComponentResponseToJSON(
  containerComponentResponse: ContainerComponentResponse,
): string {
  return JSON.stringify(
    ContainerComponentResponse$outboundSchema.parse(containerComponentResponse),
  );
}

export function containerComponentResponseFromJSON(
  jsonString: string,
): SafeParseResult<ContainerComponentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContainerComponentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContainerComponentResponse' from JSON`,
  );
}
