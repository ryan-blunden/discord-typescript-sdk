/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SeparatorComponentForMessageRequest = {
  type?: 1 | undefined;
  spacing?: 1 | null | undefined;
  divider?: boolean | null | undefined;
};

/** @internal */
export const SeparatorComponentForMessageRequest$inboundSchema: z.ZodType<
  SeparatorComponentForMessageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal(1).optional(),
  spacing: z.nullable(z.literal(1)).optional(),
  divider: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type SeparatorComponentForMessageRequest$Outbound = {
  type: 1;
  spacing: 1 | null;
  divider?: boolean | null | undefined;
};

/** @internal */
export const SeparatorComponentForMessageRequest$outboundSchema: z.ZodType<
  SeparatorComponentForMessageRequest$Outbound,
  z.ZodTypeDef,
  SeparatorComponentForMessageRequest
> = z.object({
  type: z.literal(1).default(1 as const),
  spacing: z.nullable(z.literal(1).default(1 as const)),
  divider: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SeparatorComponentForMessageRequest$ {
  /** @deprecated use `SeparatorComponentForMessageRequest$inboundSchema` instead. */
  export const inboundSchema =
    SeparatorComponentForMessageRequest$inboundSchema;
  /** @deprecated use `SeparatorComponentForMessageRequest$outboundSchema` instead. */
  export const outboundSchema =
    SeparatorComponentForMessageRequest$outboundSchema;
  /** @deprecated use `SeparatorComponentForMessageRequest$Outbound` instead. */
  export type Outbound = SeparatorComponentForMessageRequest$Outbound;
}

export function separatorComponentForMessageRequestToJSON(
  separatorComponentForMessageRequest: SeparatorComponentForMessageRequest,
): string {
  return JSON.stringify(
    SeparatorComponentForMessageRequest$outboundSchema.parse(
      separatorComponentForMessageRequest,
    ),
  );
}

export function separatorComponentForMessageRequestFromJSON(
  jsonString: string,
): SafeParseResult<SeparatorComponentForMessageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SeparatorComponentForMessageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SeparatorComponentForMessageRequest' from JSON`,
  );
}
