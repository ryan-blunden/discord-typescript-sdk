/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ButtonComponentResponse,
  ButtonComponentResponse$inboundSchema,
  ButtonComponentResponse$Outbound,
  ButtonComponentResponse$outboundSchema,
} from "./buttoncomponentresponse.js";
import {
  TextDisplayComponentResponse,
  TextDisplayComponentResponse$inboundSchema,
  TextDisplayComponentResponse$Outbound,
  TextDisplayComponentResponse$outboundSchema,
} from "./textdisplaycomponentresponse.js";
import {
  ThumbnailComponentResponse,
  ThumbnailComponentResponse$inboundSchema,
  ThumbnailComponentResponse$Outbound,
  ThumbnailComponentResponse$outboundSchema,
} from "./thumbnailcomponentresponse.js";

export type Accessory = ThumbnailComponentResponse | ButtonComponentResponse;

export type SectionComponentResponse = {
  type?: 1 | undefined;
  id: number;
  components: Array<TextDisplayComponentResponse>;
  accessory: ThumbnailComponentResponse | ButtonComponentResponse;
};

/** @internal */
export const Accessory$inboundSchema: z.ZodType<
  Accessory,
  z.ZodTypeDef,
  unknown
> = z.union([
  ThumbnailComponentResponse$inboundSchema,
  ButtonComponentResponse$inboundSchema,
]);

/** @internal */
export type Accessory$Outbound =
  | ThumbnailComponentResponse$Outbound
  | ButtonComponentResponse$Outbound;

/** @internal */
export const Accessory$outboundSchema: z.ZodType<
  Accessory$Outbound,
  z.ZodTypeDef,
  Accessory
> = z.union([
  ThumbnailComponentResponse$outboundSchema,
  ButtonComponentResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Accessory$ {
  /** @deprecated use `Accessory$inboundSchema` instead. */
  export const inboundSchema = Accessory$inboundSchema;
  /** @deprecated use `Accessory$outboundSchema` instead. */
  export const outboundSchema = Accessory$outboundSchema;
  /** @deprecated use `Accessory$Outbound` instead. */
  export type Outbound = Accessory$Outbound;
}

export function accessoryToJSON(accessory: Accessory): string {
  return JSON.stringify(Accessory$outboundSchema.parse(accessory));
}

export function accessoryFromJSON(
  jsonString: string,
): SafeParseResult<Accessory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Accessory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Accessory' from JSON`,
  );
}

/** @internal */
export const SectionComponentResponse$inboundSchema: z.ZodType<
  SectionComponentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal(1).optional(),
  id: z.number().int(),
  components: z.array(TextDisplayComponentResponse$inboundSchema),
  accessory: z.union([
    ThumbnailComponentResponse$inboundSchema,
    ButtonComponentResponse$inboundSchema,
  ]),
});

/** @internal */
export type SectionComponentResponse$Outbound = {
  type: 1;
  id: number;
  components: Array<TextDisplayComponentResponse$Outbound>;
  accessory:
    | ThumbnailComponentResponse$Outbound
    | ButtonComponentResponse$Outbound;
};

/** @internal */
export const SectionComponentResponse$outboundSchema: z.ZodType<
  SectionComponentResponse$Outbound,
  z.ZodTypeDef,
  SectionComponentResponse
> = z.object({
  type: z.literal(1).default(1 as const),
  id: z.number().int(),
  components: z.array(TextDisplayComponentResponse$outboundSchema),
  accessory: z.union([
    ThumbnailComponentResponse$outboundSchema,
    ButtonComponentResponse$outboundSchema,
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SectionComponentResponse$ {
  /** @deprecated use `SectionComponentResponse$inboundSchema` instead. */
  export const inboundSchema = SectionComponentResponse$inboundSchema;
  /** @deprecated use `SectionComponentResponse$outboundSchema` instead. */
  export const outboundSchema = SectionComponentResponse$outboundSchema;
  /** @deprecated use `SectionComponentResponse$Outbound` instead. */
  export type Outbound = SectionComponentResponse$Outbound;
}

export function sectionComponentResponseToJSON(
  sectionComponentResponse: SectionComponentResponse,
): string {
  return JSON.stringify(
    SectionComponentResponse$outboundSchema.parse(sectionComponentResponse),
  );
}

export function sectionComponentResponseFromJSON(
  jsonString: string,
): SafeParseResult<SectionComponentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SectionComponentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SectionComponentResponse' from JSON`,
  );
}
