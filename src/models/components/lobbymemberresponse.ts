/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LobbyMemberResponse = {
  id: string;
  metadata?: { [k: string]: string } | null | undefined;
  flags: number;
};

/** @internal */
export const LobbyMemberResponse$inboundSchema: z.ZodType<
  LobbyMemberResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  metadata: z.nullable(z.record(z.string())).optional(),
  flags: z.number().int(),
});

/** @internal */
export type LobbyMemberResponse$Outbound = {
  id: string;
  metadata?: { [k: string]: string } | null | undefined;
  flags: number;
};

/** @internal */
export const LobbyMemberResponse$outboundSchema: z.ZodType<
  LobbyMemberResponse$Outbound,
  z.ZodTypeDef,
  LobbyMemberResponse
> = z.object({
  id: z.string(),
  metadata: z.nullable(z.record(z.string())).optional(),
  flags: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LobbyMemberResponse$ {
  /** @deprecated use `LobbyMemberResponse$inboundSchema` instead. */
  export const inboundSchema = LobbyMemberResponse$inboundSchema;
  /** @deprecated use `LobbyMemberResponse$outboundSchema` instead. */
  export const outboundSchema = LobbyMemberResponse$outboundSchema;
  /** @deprecated use `LobbyMemberResponse$Outbound` instead. */
  export type Outbound = LobbyMemberResponse$Outbound;
}

export function lobbyMemberResponseToJSON(
  lobbyMemberResponse: LobbyMemberResponse,
): string {
  return JSON.stringify(
    LobbyMemberResponse$outboundSchema.parse(lobbyMemberResponse),
  );
}

export function lobbyMemberResponseFromJSON(
  jsonString: string,
): SafeParseResult<LobbyMemberResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LobbyMemberResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LobbyMemberResponse' from JSON`,
  );
}
