/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const BulkLobbyMemberRequestFlags = {
  One: 1,
} as const;
export type BulkLobbyMemberRequestFlags = ClosedEnum<
  typeof BulkLobbyMemberRequestFlags
>;

export type BulkLobbyMemberRequest = {
  id: string;
  metadata?: { [k: string]: string } | null | undefined;
  flags?: BulkLobbyMemberRequestFlags | null | undefined;
  removeMember?: boolean | null | undefined;
};

/** @internal */
export const BulkLobbyMemberRequestFlags$inboundSchema: z.ZodNativeEnum<
  typeof BulkLobbyMemberRequestFlags
> = z.nativeEnum(BulkLobbyMemberRequestFlags);

/** @internal */
export const BulkLobbyMemberRequestFlags$outboundSchema: z.ZodNativeEnum<
  typeof BulkLobbyMemberRequestFlags
> = BulkLobbyMemberRequestFlags$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkLobbyMemberRequestFlags$ {
  /** @deprecated use `BulkLobbyMemberRequestFlags$inboundSchema` instead. */
  export const inboundSchema = BulkLobbyMemberRequestFlags$inboundSchema;
  /** @deprecated use `BulkLobbyMemberRequestFlags$outboundSchema` instead. */
  export const outboundSchema = BulkLobbyMemberRequestFlags$outboundSchema;
}

/** @internal */
export const BulkLobbyMemberRequest$inboundSchema: z.ZodType<
  BulkLobbyMemberRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  metadata: z.nullable(z.record(z.string())).optional(),
  flags: z.nullable(BulkLobbyMemberRequestFlags$inboundSchema).optional(),
  remove_member: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "remove_member": "removeMember",
  });
});

/** @internal */
export type BulkLobbyMemberRequest$Outbound = {
  id: string;
  metadata?: { [k: string]: string } | null | undefined;
  flags?: number | null | undefined;
  remove_member?: boolean | null | undefined;
};

/** @internal */
export const BulkLobbyMemberRequest$outboundSchema: z.ZodType<
  BulkLobbyMemberRequest$Outbound,
  z.ZodTypeDef,
  BulkLobbyMemberRequest
> = z.object({
  id: z.string(),
  metadata: z.nullable(z.record(z.string())).optional(),
  flags: z.nullable(BulkLobbyMemberRequestFlags$outboundSchema).optional(),
  removeMember: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    removeMember: "remove_member",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkLobbyMemberRequest$ {
  /** @deprecated use `BulkLobbyMemberRequest$inboundSchema` instead. */
  export const inboundSchema = BulkLobbyMemberRequest$inboundSchema;
  /** @deprecated use `BulkLobbyMemberRequest$outboundSchema` instead. */
  export const outboundSchema = BulkLobbyMemberRequest$outboundSchema;
  /** @deprecated use `BulkLobbyMemberRequest$Outbound` instead. */
  export type Outbound = BulkLobbyMemberRequest$Outbound;
}

export function bulkLobbyMemberRequestToJSON(
  bulkLobbyMemberRequest: BulkLobbyMemberRequest,
): string {
  return JSON.stringify(
    BulkLobbyMemberRequest$outboundSchema.parse(bulkLobbyMemberRequest),
  );
}

export function bulkLobbyMemberRequestFromJSON(
  jsonString: string,
): SafeParseResult<BulkLobbyMemberRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkLobbyMemberRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkLobbyMemberRequest' from JSON`,
  );
}
