/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PartnerSDKUnmergeProvisionalAccountSecurity = {
  botToken?: string | undefined;
};

export type PartnerSDKUnmergeProvisionalAccountRequestBody = {
  clientId: string;
  clientSecret?: string | null | undefined;
  externalAuthToken: string;
  externalAuthType?: "OIDC" | undefined;
};

/** @internal */
export const PartnerSDKUnmergeProvisionalAccountSecurity$inboundSchema:
  z.ZodType<
    PartnerSDKUnmergeProvisionalAccountSecurity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    BotToken: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "BotToken": "botToken",
    });
  });

/** @internal */
export type PartnerSDKUnmergeProvisionalAccountSecurity$Outbound = {
  BotToken?: string | undefined;
};

/** @internal */
export const PartnerSDKUnmergeProvisionalAccountSecurity$outboundSchema:
  z.ZodType<
    PartnerSDKUnmergeProvisionalAccountSecurity$Outbound,
    z.ZodTypeDef,
    PartnerSDKUnmergeProvisionalAccountSecurity
  > = z.object({
    botToken: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      botToken: "BotToken",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PartnerSDKUnmergeProvisionalAccountSecurity$ {
  /** @deprecated use `PartnerSDKUnmergeProvisionalAccountSecurity$inboundSchema` instead. */
  export const inboundSchema =
    PartnerSDKUnmergeProvisionalAccountSecurity$inboundSchema;
  /** @deprecated use `PartnerSDKUnmergeProvisionalAccountSecurity$outboundSchema` instead. */
  export const outboundSchema =
    PartnerSDKUnmergeProvisionalAccountSecurity$outboundSchema;
  /** @deprecated use `PartnerSDKUnmergeProvisionalAccountSecurity$Outbound` instead. */
  export type Outbound = PartnerSDKUnmergeProvisionalAccountSecurity$Outbound;
}

export function partnerSDKUnmergeProvisionalAccountSecurityToJSON(
  partnerSDKUnmergeProvisionalAccountSecurity:
    PartnerSDKUnmergeProvisionalAccountSecurity,
): string {
  return JSON.stringify(
    PartnerSDKUnmergeProvisionalAccountSecurity$outboundSchema.parse(
      partnerSDKUnmergeProvisionalAccountSecurity,
    ),
  );
}

export function partnerSDKUnmergeProvisionalAccountSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  PartnerSDKUnmergeProvisionalAccountSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PartnerSDKUnmergeProvisionalAccountSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PartnerSDKUnmergeProvisionalAccountSecurity' from JSON`,
  );
}

/** @internal */
export const PartnerSDKUnmergeProvisionalAccountRequestBody$inboundSchema:
  z.ZodType<
    PartnerSDKUnmergeProvisionalAccountRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    client_id: z.string(),
    client_secret: z.nullable(z.string()).optional(),
    external_auth_token: z.string(),
    external_auth_type: z.literal("OIDC").optional(),
  }).transform((v) => {
    return remap$(v, {
      "client_id": "clientId",
      "client_secret": "clientSecret",
      "external_auth_token": "externalAuthToken",
      "external_auth_type": "externalAuthType",
    });
  });

/** @internal */
export type PartnerSDKUnmergeProvisionalAccountRequestBody$Outbound = {
  client_id: string;
  client_secret?: string | null | undefined;
  external_auth_token: string;
  external_auth_type: "OIDC";
};

/** @internal */
export const PartnerSDKUnmergeProvisionalAccountRequestBody$outboundSchema:
  z.ZodType<
    PartnerSDKUnmergeProvisionalAccountRequestBody$Outbound,
    z.ZodTypeDef,
    PartnerSDKUnmergeProvisionalAccountRequestBody
  > = z.object({
    clientId: z.string(),
    clientSecret: z.nullable(z.string()).optional(),
    externalAuthToken: z.string(),
    externalAuthType: z.literal("OIDC").default("OIDC" as const),
  }).transform((v) => {
    return remap$(v, {
      clientId: "client_id",
      clientSecret: "client_secret",
      externalAuthToken: "external_auth_token",
      externalAuthType: "external_auth_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PartnerSDKUnmergeProvisionalAccountRequestBody$ {
  /** @deprecated use `PartnerSDKUnmergeProvisionalAccountRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PartnerSDKUnmergeProvisionalAccountRequestBody$inboundSchema;
  /** @deprecated use `PartnerSDKUnmergeProvisionalAccountRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PartnerSDKUnmergeProvisionalAccountRequestBody$outboundSchema;
  /** @deprecated use `PartnerSDKUnmergeProvisionalAccountRequestBody$Outbound` instead. */
  export type Outbound =
    PartnerSDKUnmergeProvisionalAccountRequestBody$Outbound;
}

export function partnerSDKUnmergeProvisionalAccountRequestBodyToJSON(
  partnerSDKUnmergeProvisionalAccountRequestBody:
    PartnerSDKUnmergeProvisionalAccountRequestBody,
): string {
  return JSON.stringify(
    PartnerSDKUnmergeProvisionalAccountRequestBody$outboundSchema.parse(
      partnerSDKUnmergeProvisionalAccountRequestBody,
    ),
  );
}

export function partnerSDKUnmergeProvisionalAccountRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PartnerSDKUnmergeProvisionalAccountRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PartnerSDKUnmergeProvisionalAccountRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PartnerSDKUnmergeProvisionalAccountRequestBody' from JSON`,
  );
}
