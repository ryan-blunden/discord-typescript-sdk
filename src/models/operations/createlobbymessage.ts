/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateLobbyMessageSecurity = {
  botToken?: string | undefined;
};

export type CreateLobbyMessageRequest = {
  lobbyId: string;
  sdkMessageRequest: components.SDKMessageRequest;
};

/** @internal */
export const CreateLobbyMessageSecurity$inboundSchema: z.ZodType<
  CreateLobbyMessageSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BotToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BotToken": "botToken",
  });
});

/** @internal */
export type CreateLobbyMessageSecurity$Outbound = {
  BotToken?: string | undefined;
};

/** @internal */
export const CreateLobbyMessageSecurity$outboundSchema: z.ZodType<
  CreateLobbyMessageSecurity$Outbound,
  z.ZodTypeDef,
  CreateLobbyMessageSecurity
> = z.object({
  botToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    botToken: "BotToken",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLobbyMessageSecurity$ {
  /** @deprecated use `CreateLobbyMessageSecurity$inboundSchema` instead. */
  export const inboundSchema = CreateLobbyMessageSecurity$inboundSchema;
  /** @deprecated use `CreateLobbyMessageSecurity$outboundSchema` instead. */
  export const outboundSchema = CreateLobbyMessageSecurity$outboundSchema;
  /** @deprecated use `CreateLobbyMessageSecurity$Outbound` instead. */
  export type Outbound = CreateLobbyMessageSecurity$Outbound;
}

export function createLobbyMessageSecurityToJSON(
  createLobbyMessageSecurity: CreateLobbyMessageSecurity,
): string {
  return JSON.stringify(
    CreateLobbyMessageSecurity$outboundSchema.parse(createLobbyMessageSecurity),
  );
}

export function createLobbyMessageSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateLobbyMessageSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLobbyMessageSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLobbyMessageSecurity' from JSON`,
  );
}

/** @internal */
export const CreateLobbyMessageRequest$inboundSchema: z.ZodType<
  CreateLobbyMessageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  lobby_id: z.string(),
  SDKMessageRequest: components.SDKMessageRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "lobby_id": "lobbyId",
    "SDKMessageRequest": "sdkMessageRequest",
  });
});

/** @internal */
export type CreateLobbyMessageRequest$Outbound = {
  lobby_id: string;
  SDKMessageRequest: components.SDKMessageRequest$Outbound;
};

/** @internal */
export const CreateLobbyMessageRequest$outboundSchema: z.ZodType<
  CreateLobbyMessageRequest$Outbound,
  z.ZodTypeDef,
  CreateLobbyMessageRequest
> = z.object({
  lobbyId: z.string(),
  sdkMessageRequest: components.SDKMessageRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    lobbyId: "lobby_id",
    sdkMessageRequest: "SDKMessageRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLobbyMessageRequest$ {
  /** @deprecated use `CreateLobbyMessageRequest$inboundSchema` instead. */
  export const inboundSchema = CreateLobbyMessageRequest$inboundSchema;
  /** @deprecated use `CreateLobbyMessageRequest$outboundSchema` instead. */
  export const outboundSchema = CreateLobbyMessageRequest$outboundSchema;
  /** @deprecated use `CreateLobbyMessageRequest$Outbound` instead. */
  export type Outbound = CreateLobbyMessageRequest$Outbound;
}

export function createLobbyMessageRequestToJSON(
  createLobbyMessageRequest: CreateLobbyMessageRequest,
): string {
  return JSON.stringify(
    CreateLobbyMessageRequest$outboundSchema.parse(createLobbyMessageRequest),
  );
}

export function createLobbyMessageRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateLobbyMessageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLobbyMessageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLobbyMessageRequest' from JSON`,
  );
}
