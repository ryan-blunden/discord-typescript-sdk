/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Flags = {
  One: 1,
} as const;
export type Flags = ClosedEnum<typeof Flags>;

export type AddLobbyMemberRequestBody = {
  metadata?: { [k: string]: string } | null | undefined;
  flags?: Flags | null | undefined;
};

export type AddLobbyMemberRequest = {
  lobbyId: string;
  userId: string;
  requestBody: AddLobbyMemberRequestBody;
};

/** @internal */
export const Flags$inboundSchema: z.ZodNativeEnum<typeof Flags> = z.nativeEnum(
  Flags,
);

/** @internal */
export const Flags$outboundSchema: z.ZodNativeEnum<typeof Flags> =
  Flags$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Flags$ {
  /** @deprecated use `Flags$inboundSchema` instead. */
  export const inboundSchema = Flags$inboundSchema;
  /** @deprecated use `Flags$outboundSchema` instead. */
  export const outboundSchema = Flags$outboundSchema;
}

/** @internal */
export const AddLobbyMemberRequestBody$inboundSchema: z.ZodType<
  AddLobbyMemberRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.nullable(z.record(z.string())).optional(),
  flags: z.nullable(Flags$inboundSchema).optional(),
});

/** @internal */
export type AddLobbyMemberRequestBody$Outbound = {
  metadata?: { [k: string]: string } | null | undefined;
  flags?: number | null | undefined;
};

/** @internal */
export const AddLobbyMemberRequestBody$outboundSchema: z.ZodType<
  AddLobbyMemberRequestBody$Outbound,
  z.ZodTypeDef,
  AddLobbyMemberRequestBody
> = z.object({
  metadata: z.nullable(z.record(z.string())).optional(),
  flags: z.nullable(Flags$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddLobbyMemberRequestBody$ {
  /** @deprecated use `AddLobbyMemberRequestBody$inboundSchema` instead. */
  export const inboundSchema = AddLobbyMemberRequestBody$inboundSchema;
  /** @deprecated use `AddLobbyMemberRequestBody$outboundSchema` instead. */
  export const outboundSchema = AddLobbyMemberRequestBody$outboundSchema;
  /** @deprecated use `AddLobbyMemberRequestBody$Outbound` instead. */
  export type Outbound = AddLobbyMemberRequestBody$Outbound;
}

export function addLobbyMemberRequestBodyToJSON(
  addLobbyMemberRequestBody: AddLobbyMemberRequestBody,
): string {
  return JSON.stringify(
    AddLobbyMemberRequestBody$outboundSchema.parse(addLobbyMemberRequestBody),
  );
}

export function addLobbyMemberRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddLobbyMemberRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddLobbyMemberRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddLobbyMemberRequestBody' from JSON`,
  );
}

/** @internal */
export const AddLobbyMemberRequest$inboundSchema: z.ZodType<
  AddLobbyMemberRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  lobby_id: z.string(),
  user_id: z.string(),
  RequestBody: z.lazy(() => AddLobbyMemberRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "lobby_id": "lobbyId",
    "user_id": "userId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AddLobbyMemberRequest$Outbound = {
  lobby_id: string;
  user_id: string;
  RequestBody: AddLobbyMemberRequestBody$Outbound;
};

/** @internal */
export const AddLobbyMemberRequest$outboundSchema: z.ZodType<
  AddLobbyMemberRequest$Outbound,
  z.ZodTypeDef,
  AddLobbyMemberRequest
> = z.object({
  lobbyId: z.string(),
  userId: z.string(),
  requestBody: z.lazy(() => AddLobbyMemberRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    lobbyId: "lobby_id",
    userId: "user_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddLobbyMemberRequest$ {
  /** @deprecated use `AddLobbyMemberRequest$inboundSchema` instead. */
  export const inboundSchema = AddLobbyMemberRequest$inboundSchema;
  /** @deprecated use `AddLobbyMemberRequest$outboundSchema` instead. */
  export const outboundSchema = AddLobbyMemberRequest$outboundSchema;
  /** @deprecated use `AddLobbyMemberRequest$Outbound` instead. */
  export type Outbound = AddLobbyMemberRequest$Outbound;
}

export function addLobbyMemberRequestToJSON(
  addLobbyMemberRequest: AddLobbyMemberRequest,
): string {
  return JSON.stringify(
    AddLobbyMemberRequest$outboundSchema.parse(addLobbyMemberRequest),
  );
}

export function addLobbyMemberRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddLobbyMemberRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddLobbyMemberRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddLobbyMemberRequest' from JSON`,
  );
}
