/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateThreadFormRequestBody =
  | components.CreateForumThreadRequest
  | components.CreateTextThreadWithoutMessageRequest;

export type CreateThreadFormRequest = {
  channelId: string;
  requestBody:
    | components.CreateForumThreadRequest
    | components.CreateTextThreadWithoutMessageRequest;
};

/** @internal */
export const CreateThreadFormRequestBody$inboundSchema: z.ZodType<
  CreateThreadFormRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.CreateForumThreadRequest$inboundSchema,
  components.CreateTextThreadWithoutMessageRequest$inboundSchema,
]);

/** @internal */
export type CreateThreadFormRequestBody$Outbound =
  | components.CreateForumThreadRequest$Outbound
  | components.CreateTextThreadWithoutMessageRequest$Outbound;

/** @internal */
export const CreateThreadFormRequestBody$outboundSchema: z.ZodType<
  CreateThreadFormRequestBody$Outbound,
  z.ZodTypeDef,
  CreateThreadFormRequestBody
> = z.union([
  components.CreateForumThreadRequest$outboundSchema,
  components.CreateTextThreadWithoutMessageRequest$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadFormRequestBody$ {
  /** @deprecated use `CreateThreadFormRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateThreadFormRequestBody$inboundSchema;
  /** @deprecated use `CreateThreadFormRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateThreadFormRequestBody$outboundSchema;
  /** @deprecated use `CreateThreadFormRequestBody$Outbound` instead. */
  export type Outbound = CreateThreadFormRequestBody$Outbound;
}

export function createThreadFormRequestBodyToJSON(
  createThreadFormRequestBody: CreateThreadFormRequestBody,
): string {
  return JSON.stringify(
    CreateThreadFormRequestBody$outboundSchema.parse(
      createThreadFormRequestBody,
    ),
  );
}

export function createThreadFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateThreadFormRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateThreadFormRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadFormRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateThreadFormRequest$inboundSchema: z.ZodType<
  CreateThreadFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel_id: z.string(),
  RequestBody: z.union([
    components.CreateForumThreadRequest$inboundSchema,
    components.CreateTextThreadWithoutMessageRequest$inboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    "channel_id": "channelId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateThreadFormRequest$Outbound = {
  channel_id: string;
  RequestBody:
    | components.CreateForumThreadRequest$Outbound
    | components.CreateTextThreadWithoutMessageRequest$Outbound;
};

/** @internal */
export const CreateThreadFormRequest$outboundSchema: z.ZodType<
  CreateThreadFormRequest$Outbound,
  z.ZodTypeDef,
  CreateThreadFormRequest
> = z.object({
  channelId: z.string(),
  requestBody: z.union([
    components.CreateForumThreadRequest$outboundSchema,
    components.CreateTextThreadWithoutMessageRequest$outboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    channelId: "channel_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadFormRequest$ {
  /** @deprecated use `CreateThreadFormRequest$inboundSchema` instead. */
  export const inboundSchema = CreateThreadFormRequest$inboundSchema;
  /** @deprecated use `CreateThreadFormRequest$outboundSchema` instead. */
  export const outboundSchema = CreateThreadFormRequest$outboundSchema;
  /** @deprecated use `CreateThreadFormRequest$Outbound` instead. */
  export type Outbound = CreateThreadFormRequest$Outbound;
}

export function createThreadFormRequestToJSON(
  createThreadFormRequest: CreateThreadFormRequest,
): string {
  return JSON.stringify(
    CreateThreadFormRequest$outboundSchema.parse(createThreadFormRequest),
  );
}

export function createThreadFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateThreadFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateThreadFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadFormRequest' from JSON`,
  );
}
