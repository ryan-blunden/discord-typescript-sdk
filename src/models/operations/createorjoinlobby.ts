/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateOrJoinLobbySecurity = {
  botToken?: string | undefined;
};

export type CreateOrJoinLobbyRequestBody = {
  idleTimeoutSeconds?: number | null | undefined;
  lobbyMetadata?: { [k: string]: string } | null | undefined;
  memberMetadata?: { [k: string]: string } | null | undefined;
  secret: string;
};

/** @internal */
export const CreateOrJoinLobbySecurity$inboundSchema: z.ZodType<
  CreateOrJoinLobbySecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BotToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BotToken": "botToken",
  });
});

/** @internal */
export type CreateOrJoinLobbySecurity$Outbound = {
  BotToken?: string | undefined;
};

/** @internal */
export const CreateOrJoinLobbySecurity$outboundSchema: z.ZodType<
  CreateOrJoinLobbySecurity$Outbound,
  z.ZodTypeDef,
  CreateOrJoinLobbySecurity
> = z.object({
  botToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    botToken: "BotToken",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrJoinLobbySecurity$ {
  /** @deprecated use `CreateOrJoinLobbySecurity$inboundSchema` instead. */
  export const inboundSchema = CreateOrJoinLobbySecurity$inboundSchema;
  /** @deprecated use `CreateOrJoinLobbySecurity$outboundSchema` instead. */
  export const outboundSchema = CreateOrJoinLobbySecurity$outboundSchema;
  /** @deprecated use `CreateOrJoinLobbySecurity$Outbound` instead. */
  export type Outbound = CreateOrJoinLobbySecurity$Outbound;
}

export function createOrJoinLobbySecurityToJSON(
  createOrJoinLobbySecurity: CreateOrJoinLobbySecurity,
): string {
  return JSON.stringify(
    CreateOrJoinLobbySecurity$outboundSchema.parse(createOrJoinLobbySecurity),
  );
}

export function createOrJoinLobbySecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrJoinLobbySecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrJoinLobbySecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrJoinLobbySecurity' from JSON`,
  );
}

/** @internal */
export const CreateOrJoinLobbyRequestBody$inboundSchema: z.ZodType<
  CreateOrJoinLobbyRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  idle_timeout_seconds: z.nullable(z.number().int()).optional(),
  lobby_metadata: z.nullable(z.record(z.string())).optional(),
  member_metadata: z.nullable(z.record(z.string())).optional(),
  secret: z.string(),
}).transform((v) => {
  return remap$(v, {
    "idle_timeout_seconds": "idleTimeoutSeconds",
    "lobby_metadata": "lobbyMetadata",
    "member_metadata": "memberMetadata",
  });
});

/** @internal */
export type CreateOrJoinLobbyRequestBody$Outbound = {
  idle_timeout_seconds?: number | null | undefined;
  lobby_metadata?: { [k: string]: string } | null | undefined;
  member_metadata?: { [k: string]: string } | null | undefined;
  secret: string;
};

/** @internal */
export const CreateOrJoinLobbyRequestBody$outboundSchema: z.ZodType<
  CreateOrJoinLobbyRequestBody$Outbound,
  z.ZodTypeDef,
  CreateOrJoinLobbyRequestBody
> = z.object({
  idleTimeoutSeconds: z.nullable(z.number().int()).optional(),
  lobbyMetadata: z.nullable(z.record(z.string())).optional(),
  memberMetadata: z.nullable(z.record(z.string())).optional(),
  secret: z.string(),
}).transform((v) => {
  return remap$(v, {
    idleTimeoutSeconds: "idle_timeout_seconds",
    lobbyMetadata: "lobby_metadata",
    memberMetadata: "member_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrJoinLobbyRequestBody$ {
  /** @deprecated use `CreateOrJoinLobbyRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateOrJoinLobbyRequestBody$inboundSchema;
  /** @deprecated use `CreateOrJoinLobbyRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateOrJoinLobbyRequestBody$outboundSchema;
  /** @deprecated use `CreateOrJoinLobbyRequestBody$Outbound` instead. */
  export type Outbound = CreateOrJoinLobbyRequestBody$Outbound;
}

export function createOrJoinLobbyRequestBodyToJSON(
  createOrJoinLobbyRequestBody: CreateOrJoinLobbyRequestBody,
): string {
  return JSON.stringify(
    CreateOrJoinLobbyRequestBody$outboundSchema.parse(
      createOrJoinLobbyRequestBody,
    ),
  );
}

export function createOrJoinLobbyRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrJoinLobbyRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrJoinLobbyRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrJoinLobbyRequestBody' from JSON`,
  );
}
