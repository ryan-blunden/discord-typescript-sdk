/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateThreadJsonRequestBody =
  | components.CreateForumThreadRequest
  | components.CreateTextThreadWithoutMessageRequest;

export type CreateThreadJsonRequest = {
  channelId: string;
  requestBody:
    | components.CreateForumThreadRequest
    | components.CreateTextThreadWithoutMessageRequest;
};

/** @internal */
export const CreateThreadJsonRequestBody$inboundSchema: z.ZodType<
  CreateThreadJsonRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.CreateForumThreadRequest$inboundSchema,
  components.CreateTextThreadWithoutMessageRequest$inboundSchema,
]);

/** @internal */
export type CreateThreadJsonRequestBody$Outbound =
  | components.CreateForumThreadRequest$Outbound
  | components.CreateTextThreadWithoutMessageRequest$Outbound;

/** @internal */
export const CreateThreadJsonRequestBody$outboundSchema: z.ZodType<
  CreateThreadJsonRequestBody$Outbound,
  z.ZodTypeDef,
  CreateThreadJsonRequestBody
> = z.union([
  components.CreateForumThreadRequest$outboundSchema,
  components.CreateTextThreadWithoutMessageRequest$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadJsonRequestBody$ {
  /** @deprecated use `CreateThreadJsonRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateThreadJsonRequestBody$inboundSchema;
  /** @deprecated use `CreateThreadJsonRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateThreadJsonRequestBody$outboundSchema;
  /** @deprecated use `CreateThreadJsonRequestBody$Outbound` instead. */
  export type Outbound = CreateThreadJsonRequestBody$Outbound;
}

export function createThreadJsonRequestBodyToJSON(
  createThreadJsonRequestBody: CreateThreadJsonRequestBody,
): string {
  return JSON.stringify(
    CreateThreadJsonRequestBody$outboundSchema.parse(
      createThreadJsonRequestBody,
    ),
  );
}

export function createThreadJsonRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateThreadJsonRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateThreadJsonRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadJsonRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateThreadJsonRequest$inboundSchema: z.ZodType<
  CreateThreadJsonRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel_id: z.string(),
  RequestBody: z.union([
    components.CreateForumThreadRequest$inboundSchema,
    components.CreateTextThreadWithoutMessageRequest$inboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    "channel_id": "channelId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateThreadJsonRequest$Outbound = {
  channel_id: string;
  RequestBody:
    | components.CreateForumThreadRequest$Outbound
    | components.CreateTextThreadWithoutMessageRequest$Outbound;
};

/** @internal */
export const CreateThreadJsonRequest$outboundSchema: z.ZodType<
  CreateThreadJsonRequest$Outbound,
  z.ZodTypeDef,
  CreateThreadJsonRequest
> = z.object({
  channelId: z.string(),
  requestBody: z.union([
    components.CreateForumThreadRequest$outboundSchema,
    components.CreateTextThreadWithoutMessageRequest$outboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    channelId: "channel_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadJsonRequest$ {
  /** @deprecated use `CreateThreadJsonRequest$inboundSchema` instead. */
  export const inboundSchema = CreateThreadJsonRequest$inboundSchema;
  /** @deprecated use `CreateThreadJsonRequest$outboundSchema` instead. */
  export const outboundSchema = CreateThreadJsonRequest$outboundSchema;
  /** @deprecated use `CreateThreadJsonRequest$Outbound` instead. */
  export type Outbound = CreateThreadJsonRequest$Outbound;
}

export function createThreadJsonRequestToJSON(
  createThreadJsonRequest: CreateThreadJsonRequest,
): string {
  return JSON.stringify(
    CreateThreadJsonRequest$outboundSchema.parse(createThreadJsonRequest),
  );
}

export function createThreadJsonRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateThreadJsonRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateThreadJsonRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadJsonRequest' from JSON`,
  );
}
