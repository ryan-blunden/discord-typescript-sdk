/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EditLobbyRequestBody = {
  idleTimeoutSeconds?: number | null | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  members?: Array<components.LobbyMemberRequest> | null | undefined;
};

export type EditLobbyRequest = {
  lobbyId: string;
  requestBody: EditLobbyRequestBody;
};

/** @internal */
export const EditLobbyRequestBody$inboundSchema: z.ZodType<
  EditLobbyRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  idle_timeout_seconds: z.nullable(z.number().int()).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  members: z.nullable(z.array(components.LobbyMemberRequest$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "idle_timeout_seconds": "idleTimeoutSeconds",
  });
});

/** @internal */
export type EditLobbyRequestBody$Outbound = {
  idle_timeout_seconds?: number | null | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  members?: Array<components.LobbyMemberRequest$Outbound> | null | undefined;
};

/** @internal */
export const EditLobbyRequestBody$outboundSchema: z.ZodType<
  EditLobbyRequestBody$Outbound,
  z.ZodTypeDef,
  EditLobbyRequestBody
> = z.object({
  idleTimeoutSeconds: z.nullable(z.number().int()).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  members: z.nullable(z.array(components.LobbyMemberRequest$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    idleTimeoutSeconds: "idle_timeout_seconds",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditLobbyRequestBody$ {
  /** @deprecated use `EditLobbyRequestBody$inboundSchema` instead. */
  export const inboundSchema = EditLobbyRequestBody$inboundSchema;
  /** @deprecated use `EditLobbyRequestBody$outboundSchema` instead. */
  export const outboundSchema = EditLobbyRequestBody$outboundSchema;
  /** @deprecated use `EditLobbyRequestBody$Outbound` instead. */
  export type Outbound = EditLobbyRequestBody$Outbound;
}

export function editLobbyRequestBodyToJSON(
  editLobbyRequestBody: EditLobbyRequestBody,
): string {
  return JSON.stringify(
    EditLobbyRequestBody$outboundSchema.parse(editLobbyRequestBody),
  );
}

export function editLobbyRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<EditLobbyRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EditLobbyRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EditLobbyRequestBody' from JSON`,
  );
}

/** @internal */
export const EditLobbyRequest$inboundSchema: z.ZodType<
  EditLobbyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  lobby_id: z.string(),
  RequestBody: z.lazy(() => EditLobbyRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "lobby_id": "lobbyId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type EditLobbyRequest$Outbound = {
  lobby_id: string;
  RequestBody: EditLobbyRequestBody$Outbound;
};

/** @internal */
export const EditLobbyRequest$outboundSchema: z.ZodType<
  EditLobbyRequest$Outbound,
  z.ZodTypeDef,
  EditLobbyRequest
> = z.object({
  lobbyId: z.string(),
  requestBody: z.lazy(() => EditLobbyRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    lobbyId: "lobby_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditLobbyRequest$ {
  /** @deprecated use `EditLobbyRequest$inboundSchema` instead. */
  export const inboundSchema = EditLobbyRequest$inboundSchema;
  /** @deprecated use `EditLobbyRequest$outboundSchema` instead. */
  export const outboundSchema = EditLobbyRequest$outboundSchema;
  /** @deprecated use `EditLobbyRequest$Outbound` instead. */
  export type Outbound = EditLobbyRequest$Outbound;
}

export function editLobbyRequestToJSON(
  editLobbyRequest: EditLobbyRequest,
): string {
  return JSON.stringify(
    EditLobbyRequest$outboundSchema.parse(editLobbyRequest),
  );
}

export function editLobbyRequestFromJSON(
  jsonString: string,
): SafeParseResult<EditLobbyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EditLobbyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EditLobbyRequest' from JSON`,
  );
}
