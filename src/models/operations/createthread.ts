/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateThreadChannelsRequestRequestBody =
  | components.CreateForumThreadRequest
  | components.CreateTextThreadWithoutMessageRequest;

export type CreateThreadRequest = {
  channelId: string;
  requestBody:
    | components.CreateForumThreadRequest
    | components.CreateTextThreadWithoutMessageRequest;
};

/** @internal */
export const CreateThreadChannelsRequestRequestBody$inboundSchema: z.ZodType<
  CreateThreadChannelsRequestRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.CreateForumThreadRequest$inboundSchema,
  components.CreateTextThreadWithoutMessageRequest$inboundSchema,
]);

/** @internal */
export type CreateThreadChannelsRequestRequestBody$Outbound =
  | components.CreateForumThreadRequest$Outbound
  | components.CreateTextThreadWithoutMessageRequest$Outbound;

/** @internal */
export const CreateThreadChannelsRequestRequestBody$outboundSchema: z.ZodType<
  CreateThreadChannelsRequestRequestBody$Outbound,
  z.ZodTypeDef,
  CreateThreadChannelsRequestRequestBody
> = z.union([
  components.CreateForumThreadRequest$outboundSchema,
  components.CreateTextThreadWithoutMessageRequest$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadChannelsRequestRequestBody$ {
  /** @deprecated use `CreateThreadChannelsRequestRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateThreadChannelsRequestRequestBody$inboundSchema;
  /** @deprecated use `CreateThreadChannelsRequestRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadChannelsRequestRequestBody$outboundSchema;
  /** @deprecated use `CreateThreadChannelsRequestRequestBody$Outbound` instead. */
  export type Outbound = CreateThreadChannelsRequestRequestBody$Outbound;
}

export function createThreadChannelsRequestRequestBodyToJSON(
  createThreadChannelsRequestRequestBody:
    CreateThreadChannelsRequestRequestBody,
): string {
  return JSON.stringify(
    CreateThreadChannelsRequestRequestBody$outboundSchema.parse(
      createThreadChannelsRequestRequestBody,
    ),
  );
}

export function createThreadChannelsRequestRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateThreadChannelsRequestRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateThreadChannelsRequestRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadChannelsRequestRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateThreadRequest$inboundSchema: z.ZodType<
  CreateThreadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel_id: z.string(),
  RequestBody: z.union([
    components.CreateForumThreadRequest$inboundSchema,
    components.CreateTextThreadWithoutMessageRequest$inboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    "channel_id": "channelId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateThreadRequest$Outbound = {
  channel_id: string;
  RequestBody:
    | components.CreateForumThreadRequest$Outbound
    | components.CreateTextThreadWithoutMessageRequest$Outbound;
};

/** @internal */
export const CreateThreadRequest$outboundSchema: z.ZodType<
  CreateThreadRequest$Outbound,
  z.ZodTypeDef,
  CreateThreadRequest
> = z.object({
  channelId: z.string(),
  requestBody: z.union([
    components.CreateForumThreadRequest$outboundSchema,
    components.CreateTextThreadWithoutMessageRequest$outboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    channelId: "channel_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequest$ {
  /** @deprecated use `CreateThreadRequest$inboundSchema` instead. */
  export const inboundSchema = CreateThreadRequest$inboundSchema;
  /** @deprecated use `CreateThreadRequest$outboundSchema` instead. */
  export const outboundSchema = CreateThreadRequest$outboundSchema;
  /** @deprecated use `CreateThreadRequest$Outbound` instead. */
  export type Outbound = CreateThreadRequest$Outbound;
}

export function createThreadRequestToJSON(
  createThreadRequest: CreateThreadRequest,
): string {
  return JSON.stringify(
    CreateThreadRequest$outboundSchema.parse(createThreadRequest),
  );
}

export function createThreadRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateThreadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateThreadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadRequest' from JSON`,
  );
}
