/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PartnerSDKTokenSecurity = {
  botToken?: string | undefined;
};

export type PartnerSDKTokenRequestBody = {
  clientId: string;
  clientSecret?: string | null | undefined;
  externalAuthToken: string;
  externalAuthType?: "OIDC" | undefined;
};

/** @internal */
export const PartnerSDKTokenSecurity$inboundSchema: z.ZodType<
  PartnerSDKTokenSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BotToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BotToken": "botToken",
  });
});

/** @internal */
export type PartnerSDKTokenSecurity$Outbound = {
  BotToken?: string | undefined;
};

/** @internal */
export const PartnerSDKTokenSecurity$outboundSchema: z.ZodType<
  PartnerSDKTokenSecurity$Outbound,
  z.ZodTypeDef,
  PartnerSDKTokenSecurity
> = z.object({
  botToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    botToken: "BotToken",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PartnerSDKTokenSecurity$ {
  /** @deprecated use `PartnerSDKTokenSecurity$inboundSchema` instead. */
  export const inboundSchema = PartnerSDKTokenSecurity$inboundSchema;
  /** @deprecated use `PartnerSDKTokenSecurity$outboundSchema` instead. */
  export const outboundSchema = PartnerSDKTokenSecurity$outboundSchema;
  /** @deprecated use `PartnerSDKTokenSecurity$Outbound` instead. */
  export type Outbound = PartnerSDKTokenSecurity$Outbound;
}

export function partnerSDKTokenSecurityToJSON(
  partnerSDKTokenSecurity: PartnerSDKTokenSecurity,
): string {
  return JSON.stringify(
    PartnerSDKTokenSecurity$outboundSchema.parse(partnerSDKTokenSecurity),
  );
}

export function partnerSDKTokenSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PartnerSDKTokenSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PartnerSDKTokenSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PartnerSDKTokenSecurity' from JSON`,
  );
}

/** @internal */
export const PartnerSDKTokenRequestBody$inboundSchema: z.ZodType<
  PartnerSDKTokenRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  client_id: z.string(),
  client_secret: z.nullable(z.string()).optional(),
  external_auth_token: z.string(),
  external_auth_type: z.literal("OIDC").optional(),
}).transform((v) => {
  return remap$(v, {
    "client_id": "clientId",
    "client_secret": "clientSecret",
    "external_auth_token": "externalAuthToken",
    "external_auth_type": "externalAuthType",
  });
});

/** @internal */
export type PartnerSDKTokenRequestBody$Outbound = {
  client_id: string;
  client_secret?: string | null | undefined;
  external_auth_token: string;
  external_auth_type: "OIDC";
};

/** @internal */
export const PartnerSDKTokenRequestBody$outboundSchema: z.ZodType<
  PartnerSDKTokenRequestBody$Outbound,
  z.ZodTypeDef,
  PartnerSDKTokenRequestBody
> = z.object({
  clientId: z.string(),
  clientSecret: z.nullable(z.string()).optional(),
  externalAuthToken: z.string(),
  externalAuthType: z.literal("OIDC").default("OIDC" as const),
}).transform((v) => {
  return remap$(v, {
    clientId: "client_id",
    clientSecret: "client_secret",
    externalAuthToken: "external_auth_token",
    externalAuthType: "external_auth_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PartnerSDKTokenRequestBody$ {
  /** @deprecated use `PartnerSDKTokenRequestBody$inboundSchema` instead. */
  export const inboundSchema = PartnerSDKTokenRequestBody$inboundSchema;
  /** @deprecated use `PartnerSDKTokenRequestBody$outboundSchema` instead. */
  export const outboundSchema = PartnerSDKTokenRequestBody$outboundSchema;
  /** @deprecated use `PartnerSDKTokenRequestBody$Outbound` instead. */
  export type Outbound = PartnerSDKTokenRequestBody$Outbound;
}

export function partnerSDKTokenRequestBodyToJSON(
  partnerSDKTokenRequestBody: PartnerSDKTokenRequestBody,
): string {
  return JSON.stringify(
    PartnerSDKTokenRequestBody$outboundSchema.parse(partnerSDKTokenRequestBody),
  );
}

export function partnerSDKTokenRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PartnerSDKTokenRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PartnerSDKTokenRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PartnerSDKTokenRequestBody' from JSON`,
  );
}
