/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetLobbyRequest = {
  lobbyId: string;
};

/** @internal */
export const GetLobbyRequest$inboundSchema: z.ZodType<
  GetLobbyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  lobby_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "lobby_id": "lobbyId",
  });
});

/** @internal */
export type GetLobbyRequest$Outbound = {
  lobby_id: string;
};

/** @internal */
export const GetLobbyRequest$outboundSchema: z.ZodType<
  GetLobbyRequest$Outbound,
  z.ZodTypeDef,
  GetLobbyRequest
> = z.object({
  lobbyId: z.string(),
}).transform((v) => {
  return remap$(v, {
    lobbyId: "lobby_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLobbyRequest$ {
  /** @deprecated use `GetLobbyRequest$inboundSchema` instead. */
  export const inboundSchema = GetLobbyRequest$inboundSchema;
  /** @deprecated use `GetLobbyRequest$outboundSchema` instead. */
  export const outboundSchema = GetLobbyRequest$outboundSchema;
  /** @deprecated use `GetLobbyRequest$Outbound` instead. */
  export type Outbound = GetLobbyRequest$Outbound;
}

export function getLobbyRequestToJSON(
  getLobbyRequest: GetLobbyRequest,
): string {
  return JSON.stringify(GetLobbyRequest$outboundSchema.parse(getLobbyRequest));
}

export function getLobbyRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetLobbyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLobbyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLobbyRequest' from JSON`,
  );
}
