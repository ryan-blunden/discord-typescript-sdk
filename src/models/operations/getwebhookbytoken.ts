/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetWebhookByTokenSecurity = {
  botToken?: string | undefined;
};

export type GetWebhookByTokenRequest = {
  webhookId: string;
  webhookToken: string;
};

/**
 * 200 response for get_webhook_by_token
 */
export type GetWebhookByTokenResponseBody =
  | components.ApplicationIncomingWebhookResponse
  | components.ChannelFollowerWebhookResponse
  | components.GuildIncomingWebhookResponse;

/** @internal */
export const GetWebhookByTokenSecurity$inboundSchema: z.ZodType<
  GetWebhookByTokenSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BotToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BotToken": "botToken",
  });
});

/** @internal */
export type GetWebhookByTokenSecurity$Outbound = {
  BotToken?: string | undefined;
};

/** @internal */
export const GetWebhookByTokenSecurity$outboundSchema: z.ZodType<
  GetWebhookByTokenSecurity$Outbound,
  z.ZodTypeDef,
  GetWebhookByTokenSecurity
> = z.object({
  botToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    botToken: "BotToken",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookByTokenSecurity$ {
  /** @deprecated use `GetWebhookByTokenSecurity$inboundSchema` instead. */
  export const inboundSchema = GetWebhookByTokenSecurity$inboundSchema;
  /** @deprecated use `GetWebhookByTokenSecurity$outboundSchema` instead. */
  export const outboundSchema = GetWebhookByTokenSecurity$outboundSchema;
  /** @deprecated use `GetWebhookByTokenSecurity$Outbound` instead. */
  export type Outbound = GetWebhookByTokenSecurity$Outbound;
}

export function getWebhookByTokenSecurityToJSON(
  getWebhookByTokenSecurity: GetWebhookByTokenSecurity,
): string {
  return JSON.stringify(
    GetWebhookByTokenSecurity$outboundSchema.parse(getWebhookByTokenSecurity),
  );
}

export function getWebhookByTokenSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookByTokenSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookByTokenSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookByTokenSecurity' from JSON`,
  );
}

/** @internal */
export const GetWebhookByTokenRequest$inboundSchema: z.ZodType<
  GetWebhookByTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  webhook_id: z.string(),
  webhook_token: z.string(),
}).transform((v) => {
  return remap$(v, {
    "webhook_id": "webhookId",
    "webhook_token": "webhookToken",
  });
});

/** @internal */
export type GetWebhookByTokenRequest$Outbound = {
  webhook_id: string;
  webhook_token: string;
};

/** @internal */
export const GetWebhookByTokenRequest$outboundSchema: z.ZodType<
  GetWebhookByTokenRequest$Outbound,
  z.ZodTypeDef,
  GetWebhookByTokenRequest
> = z.object({
  webhookId: z.string(),
  webhookToken: z.string(),
}).transform((v) => {
  return remap$(v, {
    webhookId: "webhook_id",
    webhookToken: "webhook_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookByTokenRequest$ {
  /** @deprecated use `GetWebhookByTokenRequest$inboundSchema` instead. */
  export const inboundSchema = GetWebhookByTokenRequest$inboundSchema;
  /** @deprecated use `GetWebhookByTokenRequest$outboundSchema` instead. */
  export const outboundSchema = GetWebhookByTokenRequest$outboundSchema;
  /** @deprecated use `GetWebhookByTokenRequest$Outbound` instead. */
  export type Outbound = GetWebhookByTokenRequest$Outbound;
}

export function getWebhookByTokenRequestToJSON(
  getWebhookByTokenRequest: GetWebhookByTokenRequest,
): string {
  return JSON.stringify(
    GetWebhookByTokenRequest$outboundSchema.parse(getWebhookByTokenRequest),
  );
}

export function getWebhookByTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookByTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookByTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookByTokenRequest' from JSON`,
  );
}

/** @internal */
export const GetWebhookByTokenResponseBody$inboundSchema: z.ZodType<
  GetWebhookByTokenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ApplicationIncomingWebhookResponse$inboundSchema,
  components.ChannelFollowerWebhookResponse$inboundSchema,
  components.GuildIncomingWebhookResponse$inboundSchema,
]);

/** @internal */
export type GetWebhookByTokenResponseBody$Outbound =
  | components.ApplicationIncomingWebhookResponse$Outbound
  | components.ChannelFollowerWebhookResponse$Outbound
  | components.GuildIncomingWebhookResponse$Outbound;

/** @internal */
export const GetWebhookByTokenResponseBody$outboundSchema: z.ZodType<
  GetWebhookByTokenResponseBody$Outbound,
  z.ZodTypeDef,
  GetWebhookByTokenResponseBody
> = z.union([
  components.ApplicationIncomingWebhookResponse$outboundSchema,
  components.ChannelFollowerWebhookResponse$outboundSchema,
  components.GuildIncomingWebhookResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookByTokenResponseBody$ {
  /** @deprecated use `GetWebhookByTokenResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetWebhookByTokenResponseBody$inboundSchema;
  /** @deprecated use `GetWebhookByTokenResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetWebhookByTokenResponseBody$outboundSchema;
  /** @deprecated use `GetWebhookByTokenResponseBody$Outbound` instead. */
  export type Outbound = GetWebhookByTokenResponseBody$Outbound;
}

export function getWebhookByTokenResponseBodyToJSON(
  getWebhookByTokenResponseBody: GetWebhookByTokenResponseBody,
): string {
  return JSON.stringify(
    GetWebhookByTokenResponseBody$outboundSchema.parse(
      getWebhookByTokenResponseBody,
    ),
  );
}

export function getWebhookByTokenResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookByTokenResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookByTokenResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookByTokenResponseBody' from JSON`,
  );
}
