/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetLobbyMessagesSecurity = {
  botToken?: string | undefined;
};

export type GetLobbyMessagesRequest = {
  lobbyId: string;
  limit?: number | undefined;
};

/** @internal */
export const GetLobbyMessagesSecurity$inboundSchema: z.ZodType<
  GetLobbyMessagesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BotToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BotToken": "botToken",
  });
});

/** @internal */
export type GetLobbyMessagesSecurity$Outbound = {
  BotToken?: string | undefined;
};

/** @internal */
export const GetLobbyMessagesSecurity$outboundSchema: z.ZodType<
  GetLobbyMessagesSecurity$Outbound,
  z.ZodTypeDef,
  GetLobbyMessagesSecurity
> = z.object({
  botToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    botToken: "BotToken",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLobbyMessagesSecurity$ {
  /** @deprecated use `GetLobbyMessagesSecurity$inboundSchema` instead. */
  export const inboundSchema = GetLobbyMessagesSecurity$inboundSchema;
  /** @deprecated use `GetLobbyMessagesSecurity$outboundSchema` instead. */
  export const outboundSchema = GetLobbyMessagesSecurity$outboundSchema;
  /** @deprecated use `GetLobbyMessagesSecurity$Outbound` instead. */
  export type Outbound = GetLobbyMessagesSecurity$Outbound;
}

export function getLobbyMessagesSecurityToJSON(
  getLobbyMessagesSecurity: GetLobbyMessagesSecurity,
): string {
  return JSON.stringify(
    GetLobbyMessagesSecurity$outboundSchema.parse(getLobbyMessagesSecurity),
  );
}

export function getLobbyMessagesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetLobbyMessagesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLobbyMessagesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLobbyMessagesSecurity' from JSON`,
  );
}

/** @internal */
export const GetLobbyMessagesRequest$inboundSchema: z.ZodType<
  GetLobbyMessagesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  lobby_id: z.string(),
  limit: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "lobby_id": "lobbyId",
  });
});

/** @internal */
export type GetLobbyMessagesRequest$Outbound = {
  lobby_id: string;
  limit?: number | undefined;
};

/** @internal */
export const GetLobbyMessagesRequest$outboundSchema: z.ZodType<
  GetLobbyMessagesRequest$Outbound,
  z.ZodTypeDef,
  GetLobbyMessagesRequest
> = z.object({
  lobbyId: z.string(),
  limit: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    lobbyId: "lobby_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLobbyMessagesRequest$ {
  /** @deprecated use `GetLobbyMessagesRequest$inboundSchema` instead. */
  export const inboundSchema = GetLobbyMessagesRequest$inboundSchema;
  /** @deprecated use `GetLobbyMessagesRequest$outboundSchema` instead. */
  export const outboundSchema = GetLobbyMessagesRequest$outboundSchema;
  /** @deprecated use `GetLobbyMessagesRequest$Outbound` instead. */
  export type Outbound = GetLobbyMessagesRequest$Outbound;
}

export function getLobbyMessagesRequestToJSON(
  getLobbyMessagesRequest: GetLobbyMessagesRequest,
): string {
  return JSON.stringify(
    GetLobbyMessagesRequest$outboundSchema.parse(getLobbyMessagesRequest),
  );
}

export function getLobbyMessagesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetLobbyMessagesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLobbyMessagesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLobbyMessagesRequest' from JSON`,
  );
}
