/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Channel types (1: DM, 3: GROUP_DM, 0: GUILD_TEXT, 2: GUILD_VOICE, 4: GUILD_CATEGORY, 5: GUILD_ANNOUNCEMENT, 7: UNKNOWN, 10: ANNOUNCEMENT_THREAD, 11: PUBLIC_THREAD, 12: PRIVATE_THREAD, 13: GUILD_STAGE_VOICE, 14: GUILD_DIRECTORY, 15: GUILD_FORUM)
 */
export const Type = {
  Zero: 0,
  One: 1,
  Two: 2,
  Three: 3,
  Four: 4,
  Five: 5,
  Seven: 7,
  Ten: 10,
  Eleven: 11,
  Twelve: 12,
  Thirteen: 13,
  Fourteen: 14,
  Fifteen: 15,
} as const;
/**
 * Channel types (1: DM, 3: GROUP_DM, 0: GUILD_TEXT, 2: GUILD_VOICE, 4: GUILD_CATEGORY, 5: GUILD_ANNOUNCEMENT, 7: UNKNOWN, 10: ANNOUNCEMENT_THREAD, 11: PUBLIC_THREAD, 12: PRIVATE_THREAD, 13: GUILD_STAGE_VOICE, 14: GUILD_DIRECTORY, 15: GUILD_FORUM)
 */
export type Type = ClosedEnum<typeof Type>;

export type CreateTextThreadWithoutMessageRequest = {
  name: string;
  autoArchiveDuration?: 60 | null | undefined;
  rateLimitPerUser?: number | null | undefined;
  type?: Type | undefined;
  invitable?: boolean | null | undefined;
};

export type CreateForumThreadRequest = {
  name: string;
  autoArchiveDuration?: 60 | null | undefined;
  rateLimitPerUser?: number | null | undefined;
  appliedTags?: Array<string> | null | undefined;
  message: components.BaseCreateMessageCreateRequest;
};

export type CreateThreadMultipartRequestBody =
  | CreateForumThreadRequest
  | CreateTextThreadWithoutMessageRequest;

export type CreateThreadMultipartRequest = {
  channelId: string;
  requestBody: CreateForumThreadRequest | CreateTextThreadWithoutMessageRequest;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const CreateTextThreadWithoutMessageRequest$inboundSchema: z.ZodType<
  CreateTextThreadWithoutMessageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  auto_archive_duration: z.nullable(z.literal(60)).optional(),
  rate_limit_per_user: z.nullable(z.number().int()).optional(),
  type: Type$inboundSchema.optional(),
  invitable: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "auto_archive_duration": "autoArchiveDuration",
    "rate_limit_per_user": "rateLimitPerUser",
  });
});

/** @internal */
export type CreateTextThreadWithoutMessageRequest$Outbound = {
  name: string;
  auto_archive_duration: 60 | null;
  rate_limit_per_user?: number | null | undefined;
  type?: number | undefined;
  invitable?: boolean | null | undefined;
};

/** @internal */
export const CreateTextThreadWithoutMessageRequest$outboundSchema: z.ZodType<
  CreateTextThreadWithoutMessageRequest$Outbound,
  z.ZodTypeDef,
  CreateTextThreadWithoutMessageRequest
> = z.object({
  name: z.string(),
  autoArchiveDuration: z.nullable(z.literal(60).default(60 as const)),
  rateLimitPerUser: z.nullable(z.number().int()).optional(),
  type: Type$outboundSchema.optional(),
  invitable: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    autoArchiveDuration: "auto_archive_duration",
    rateLimitPerUser: "rate_limit_per_user",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTextThreadWithoutMessageRequest$ {
  /** @deprecated use `CreateTextThreadWithoutMessageRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateTextThreadWithoutMessageRequest$inboundSchema;
  /** @deprecated use `CreateTextThreadWithoutMessageRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateTextThreadWithoutMessageRequest$outboundSchema;
  /** @deprecated use `CreateTextThreadWithoutMessageRequest$Outbound` instead. */
  export type Outbound = CreateTextThreadWithoutMessageRequest$Outbound;
}

export function createTextThreadWithoutMessageRequestToJSON(
  createTextThreadWithoutMessageRequest: CreateTextThreadWithoutMessageRequest,
): string {
  return JSON.stringify(
    CreateTextThreadWithoutMessageRequest$outboundSchema.parse(
      createTextThreadWithoutMessageRequest,
    ),
  );
}

export function createTextThreadWithoutMessageRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTextThreadWithoutMessageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateTextThreadWithoutMessageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTextThreadWithoutMessageRequest' from JSON`,
  );
}

/** @internal */
export const CreateForumThreadRequest$inboundSchema: z.ZodType<
  CreateForumThreadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  auto_archive_duration: z.nullable(z.literal(60)).optional(),
  rate_limit_per_user: z.nullable(z.number().int()).optional(),
  applied_tags: z.nullable(z.array(z.string())).optional(),
  message: components.BaseCreateMessageCreateRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "auto_archive_duration": "autoArchiveDuration",
    "rate_limit_per_user": "rateLimitPerUser",
    "applied_tags": "appliedTags",
  });
});

/** @internal */
export type CreateForumThreadRequest$Outbound = {
  name: string;
  auto_archive_duration: 60 | null;
  rate_limit_per_user?: number | null | undefined;
  applied_tags?: Array<string> | null | undefined;
  message: components.BaseCreateMessageCreateRequest$Outbound;
};

/** @internal */
export const CreateForumThreadRequest$outboundSchema: z.ZodType<
  CreateForumThreadRequest$Outbound,
  z.ZodTypeDef,
  CreateForumThreadRequest
> = z.object({
  name: z.string(),
  autoArchiveDuration: z.nullable(z.literal(60).default(60 as const)),
  rateLimitPerUser: z.nullable(z.number().int()).optional(),
  appliedTags: z.nullable(z.array(z.string())).optional(),
  message: components.BaseCreateMessageCreateRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    autoArchiveDuration: "auto_archive_duration",
    rateLimitPerUser: "rate_limit_per_user",
    appliedTags: "applied_tags",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateForumThreadRequest$ {
  /** @deprecated use `CreateForumThreadRequest$inboundSchema` instead. */
  export const inboundSchema = CreateForumThreadRequest$inboundSchema;
  /** @deprecated use `CreateForumThreadRequest$outboundSchema` instead. */
  export const outboundSchema = CreateForumThreadRequest$outboundSchema;
  /** @deprecated use `CreateForumThreadRequest$Outbound` instead. */
  export type Outbound = CreateForumThreadRequest$Outbound;
}

export function createForumThreadRequestToJSON(
  createForumThreadRequest: CreateForumThreadRequest,
): string {
  return JSON.stringify(
    CreateForumThreadRequest$outboundSchema.parse(createForumThreadRequest),
  );
}

export function createForumThreadRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateForumThreadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateForumThreadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateForumThreadRequest' from JSON`,
  );
}

/** @internal */
export const CreateThreadMultipartRequestBody$inboundSchema: z.ZodType<
  CreateThreadMultipartRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateForumThreadRequest$inboundSchema),
  z.lazy(() => CreateTextThreadWithoutMessageRequest$inboundSchema),
]);

/** @internal */
export type CreateThreadMultipartRequestBody$Outbound =
  | CreateForumThreadRequest$Outbound
  | CreateTextThreadWithoutMessageRequest$Outbound;

/** @internal */
export const CreateThreadMultipartRequestBody$outboundSchema: z.ZodType<
  CreateThreadMultipartRequestBody$Outbound,
  z.ZodTypeDef,
  CreateThreadMultipartRequestBody
> = z.union([
  z.lazy(() => CreateForumThreadRequest$outboundSchema),
  z.lazy(() => CreateTextThreadWithoutMessageRequest$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadMultipartRequestBody$ {
  /** @deprecated use `CreateThreadMultipartRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateThreadMultipartRequestBody$inboundSchema;
  /** @deprecated use `CreateThreadMultipartRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateThreadMultipartRequestBody$outboundSchema;
  /** @deprecated use `CreateThreadMultipartRequestBody$Outbound` instead. */
  export type Outbound = CreateThreadMultipartRequestBody$Outbound;
}

export function createThreadMultipartRequestBodyToJSON(
  createThreadMultipartRequestBody: CreateThreadMultipartRequestBody,
): string {
  return JSON.stringify(
    CreateThreadMultipartRequestBody$outboundSchema.parse(
      createThreadMultipartRequestBody,
    ),
  );
}

export function createThreadMultipartRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateThreadMultipartRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateThreadMultipartRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadMultipartRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateThreadMultipartRequest$inboundSchema: z.ZodType<
  CreateThreadMultipartRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel_id: z.string(),
  RequestBody: z.union([
    z.lazy(() => CreateForumThreadRequest$inboundSchema),
    z.lazy(() => CreateTextThreadWithoutMessageRequest$inboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    "channel_id": "channelId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateThreadMultipartRequest$Outbound = {
  channel_id: string;
  RequestBody:
    | CreateForumThreadRequest$Outbound
    | CreateTextThreadWithoutMessageRequest$Outbound;
};

/** @internal */
export const CreateThreadMultipartRequest$outboundSchema: z.ZodType<
  CreateThreadMultipartRequest$Outbound,
  z.ZodTypeDef,
  CreateThreadMultipartRequest
> = z.object({
  channelId: z.string(),
  requestBody: z.union([
    z.lazy(() => CreateForumThreadRequest$outboundSchema),
    z.lazy(() => CreateTextThreadWithoutMessageRequest$outboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    channelId: "channel_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadMultipartRequest$ {
  /** @deprecated use `CreateThreadMultipartRequest$inboundSchema` instead. */
  export const inboundSchema = CreateThreadMultipartRequest$inboundSchema;
  /** @deprecated use `CreateThreadMultipartRequest$outboundSchema` instead. */
  export const outboundSchema = CreateThreadMultipartRequest$outboundSchema;
  /** @deprecated use `CreateThreadMultipartRequest$Outbound` instead. */
  export type Outbound = CreateThreadMultipartRequest$Outbound;
}

export function createThreadMultipartRequestToJSON(
  createThreadMultipartRequest: CreateThreadMultipartRequest,
): string {
  return JSON.stringify(
    CreateThreadMultipartRequest$outboundSchema.parse(
      createThreadMultipartRequest,
    ),
  );
}

export function createThreadMultipartRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateThreadMultipartRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateThreadMultipartRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadMultipartRequest' from JSON`,
  );
}
