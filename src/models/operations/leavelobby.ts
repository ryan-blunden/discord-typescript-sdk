/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LeaveLobbySecurity = {
  botToken?: string | undefined;
};

export type LeaveLobbyRequest = {
  lobbyId: string;
};

/** @internal */
export const LeaveLobbySecurity$inboundSchema: z.ZodType<
  LeaveLobbySecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BotToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BotToken": "botToken",
  });
});

/** @internal */
export type LeaveLobbySecurity$Outbound = {
  BotToken?: string | undefined;
};

/** @internal */
export const LeaveLobbySecurity$outboundSchema: z.ZodType<
  LeaveLobbySecurity$Outbound,
  z.ZodTypeDef,
  LeaveLobbySecurity
> = z.object({
  botToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    botToken: "BotToken",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeaveLobbySecurity$ {
  /** @deprecated use `LeaveLobbySecurity$inboundSchema` instead. */
  export const inboundSchema = LeaveLobbySecurity$inboundSchema;
  /** @deprecated use `LeaveLobbySecurity$outboundSchema` instead. */
  export const outboundSchema = LeaveLobbySecurity$outboundSchema;
  /** @deprecated use `LeaveLobbySecurity$Outbound` instead. */
  export type Outbound = LeaveLobbySecurity$Outbound;
}

export function leaveLobbySecurityToJSON(
  leaveLobbySecurity: LeaveLobbySecurity,
): string {
  return JSON.stringify(
    LeaveLobbySecurity$outboundSchema.parse(leaveLobbySecurity),
  );
}

export function leaveLobbySecurityFromJSON(
  jsonString: string,
): SafeParseResult<LeaveLobbySecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeaveLobbySecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeaveLobbySecurity' from JSON`,
  );
}

/** @internal */
export const LeaveLobbyRequest$inboundSchema: z.ZodType<
  LeaveLobbyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  lobby_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "lobby_id": "lobbyId",
  });
});

/** @internal */
export type LeaveLobbyRequest$Outbound = {
  lobby_id: string;
};

/** @internal */
export const LeaveLobbyRequest$outboundSchema: z.ZodType<
  LeaveLobbyRequest$Outbound,
  z.ZodTypeDef,
  LeaveLobbyRequest
> = z.object({
  lobbyId: z.string(),
}).transform((v) => {
  return remap$(v, {
    lobbyId: "lobby_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeaveLobbyRequest$ {
  /** @deprecated use `LeaveLobbyRequest$inboundSchema` instead. */
  export const inboundSchema = LeaveLobbyRequest$inboundSchema;
  /** @deprecated use `LeaveLobbyRequest$outboundSchema` instead. */
  export const outboundSchema = LeaveLobbyRequest$outboundSchema;
  /** @deprecated use `LeaveLobbyRequest$Outbound` instead. */
  export type Outbound = LeaveLobbyRequest$Outbound;
}

export function leaveLobbyRequestToJSON(
  leaveLobbyRequest: LeaveLobbyRequest,
): string {
  return JSON.stringify(
    LeaveLobbyRequest$outboundSchema.parse(leaveLobbyRequest),
  );
}

export function leaveLobbyRequestFromJSON(
  jsonString: string,
): SafeParseResult<LeaveLobbyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeaveLobbyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeaveLobbyRequest' from JSON`,
  );
}
