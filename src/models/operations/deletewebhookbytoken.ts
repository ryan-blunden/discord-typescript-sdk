/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteWebhookByTokenSecurity = {
  botToken?: string | undefined;
};

export type DeleteWebhookByTokenRequest = {
  webhookId: string;
  webhookToken: string;
};

/** @internal */
export const DeleteWebhookByTokenSecurity$inboundSchema: z.ZodType<
  DeleteWebhookByTokenSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BotToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BotToken": "botToken",
  });
});

/** @internal */
export type DeleteWebhookByTokenSecurity$Outbound = {
  BotToken?: string | undefined;
};

/** @internal */
export const DeleteWebhookByTokenSecurity$outboundSchema: z.ZodType<
  DeleteWebhookByTokenSecurity$Outbound,
  z.ZodTypeDef,
  DeleteWebhookByTokenSecurity
> = z.object({
  botToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    botToken: "BotToken",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteWebhookByTokenSecurity$ {
  /** @deprecated use `DeleteWebhookByTokenSecurity$inboundSchema` instead. */
  export const inboundSchema = DeleteWebhookByTokenSecurity$inboundSchema;
  /** @deprecated use `DeleteWebhookByTokenSecurity$outboundSchema` instead. */
  export const outboundSchema = DeleteWebhookByTokenSecurity$outboundSchema;
  /** @deprecated use `DeleteWebhookByTokenSecurity$Outbound` instead. */
  export type Outbound = DeleteWebhookByTokenSecurity$Outbound;
}

export function deleteWebhookByTokenSecurityToJSON(
  deleteWebhookByTokenSecurity: DeleteWebhookByTokenSecurity,
): string {
  return JSON.stringify(
    DeleteWebhookByTokenSecurity$outboundSchema.parse(
      deleteWebhookByTokenSecurity,
    ),
  );
}

export function deleteWebhookByTokenSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DeleteWebhookByTokenSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteWebhookByTokenSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteWebhookByTokenSecurity' from JSON`,
  );
}

/** @internal */
export const DeleteWebhookByTokenRequest$inboundSchema: z.ZodType<
  DeleteWebhookByTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  webhook_id: z.string(),
  webhook_token: z.string(),
}).transform((v) => {
  return remap$(v, {
    "webhook_id": "webhookId",
    "webhook_token": "webhookToken",
  });
});

/** @internal */
export type DeleteWebhookByTokenRequest$Outbound = {
  webhook_id: string;
  webhook_token: string;
};

/** @internal */
export const DeleteWebhookByTokenRequest$outboundSchema: z.ZodType<
  DeleteWebhookByTokenRequest$Outbound,
  z.ZodTypeDef,
  DeleteWebhookByTokenRequest
> = z.object({
  webhookId: z.string(),
  webhookToken: z.string(),
}).transform((v) => {
  return remap$(v, {
    webhookId: "webhook_id",
    webhookToken: "webhook_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteWebhookByTokenRequest$ {
  /** @deprecated use `DeleteWebhookByTokenRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteWebhookByTokenRequest$inboundSchema;
  /** @deprecated use `DeleteWebhookByTokenRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteWebhookByTokenRequest$outboundSchema;
  /** @deprecated use `DeleteWebhookByTokenRequest$Outbound` instead. */
  export type Outbound = DeleteWebhookByTokenRequest$Outbound;
}

export function deleteWebhookByTokenRequestToJSON(
  deleteWebhookByTokenRequest: DeleteWebhookByTokenRequest,
): string {
  return JSON.stringify(
    DeleteWebhookByTokenRequest$outboundSchema.parse(
      deleteWebhookByTokenRequest,
    ),
  );
}

export function deleteWebhookByTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteWebhookByTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteWebhookByTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteWebhookByTokenRequest' from JSON`,
  );
}
