/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Tag = string | Array<string>;

export type ThreadSearchRequest = {
  channelId: string;
  name?: string | undefined;
  slop?: number | undefined;
  minId?: string | undefined;
  maxId?: string | undefined;
  tag?: string | Array<string> | undefined;
  tagSetting?: string | undefined;
  archived?: boolean | undefined;
  sortBy?: "relevance" | undefined;
  sortOrder?: "asc" | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
};

/** @internal */
export const Tag$inboundSchema: z.ZodType<Tag, z.ZodTypeDef, unknown> = z.union(
  [z.string(), z.array(z.string())],
);

/** @internal */
export type Tag$Outbound = string | Array<string>;

/** @internal */
export const Tag$outboundSchema: z.ZodType<Tag$Outbound, z.ZodTypeDef, Tag> = z
  .union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tag$ {
  /** @deprecated use `Tag$inboundSchema` instead. */
  export const inboundSchema = Tag$inboundSchema;
  /** @deprecated use `Tag$outboundSchema` instead. */
  export const outboundSchema = Tag$outboundSchema;
  /** @deprecated use `Tag$Outbound` instead. */
  export type Outbound = Tag$Outbound;
}

export function tagToJSON(tag: Tag): string {
  return JSON.stringify(Tag$outboundSchema.parse(tag));
}

export function tagFromJSON(
  jsonString: string,
): SafeParseResult<Tag, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tag$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tag' from JSON`,
  );
}

/** @internal */
export const ThreadSearchRequest$inboundSchema: z.ZodType<
  ThreadSearchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel_id: z.string(),
  name: z.string().optional(),
  slop: z.number().int().optional(),
  min_id: z.string().optional(),
  max_id: z.string().optional(),
  tag: z.union([z.string(), z.array(z.string())]).optional(),
  tag_setting: z.string().optional(),
  archived: z.boolean().optional(),
  sort_by: z.literal("relevance").optional(),
  sort_order: z.literal("asc").optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "channel_id": "channelId",
    "min_id": "minId",
    "max_id": "maxId",
    "tag_setting": "tagSetting",
    "sort_by": "sortBy",
    "sort_order": "sortOrder",
  });
});

/** @internal */
export type ThreadSearchRequest$Outbound = {
  channel_id: string;
  name?: string | undefined;
  slop?: number | undefined;
  min_id?: string | undefined;
  max_id?: string | undefined;
  tag?: string | Array<string> | undefined;
  tag_setting?: string | undefined;
  archived?: boolean | undefined;
  sort_by: "relevance";
  sort_order: "asc";
  limit?: number | undefined;
  offset?: number | undefined;
};

/** @internal */
export const ThreadSearchRequest$outboundSchema: z.ZodType<
  ThreadSearchRequest$Outbound,
  z.ZodTypeDef,
  ThreadSearchRequest
> = z.object({
  channelId: z.string(),
  name: z.string().optional(),
  slop: z.number().int().optional(),
  minId: z.string().optional(),
  maxId: z.string().optional(),
  tag: z.union([z.string(), z.array(z.string())]).optional(),
  tagSetting: z.string().optional(),
  archived: z.boolean().optional(),
  sortBy: z.literal("relevance").default("relevance" as const),
  sortOrder: z.literal("asc").default("asc" as const),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    channelId: "channel_id",
    minId: "min_id",
    maxId: "max_id",
    tagSetting: "tag_setting",
    sortBy: "sort_by",
    sortOrder: "sort_order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreadSearchRequest$ {
  /** @deprecated use `ThreadSearchRequest$inboundSchema` instead. */
  export const inboundSchema = ThreadSearchRequest$inboundSchema;
  /** @deprecated use `ThreadSearchRequest$outboundSchema` instead. */
  export const outboundSchema = ThreadSearchRequest$outboundSchema;
  /** @deprecated use `ThreadSearchRequest$Outbound` instead. */
  export type Outbound = ThreadSearchRequest$Outbound;
}

export function threadSearchRequestToJSON(
  threadSearchRequest: ThreadSearchRequest,
): string {
  return JSON.stringify(
    ThreadSearchRequest$outboundSchema.parse(threadSearchRequest),
  );
}

export function threadSearchRequestFromJSON(
  jsonString: string,
): SafeParseResult<ThreadSearchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ThreadSearchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ThreadSearchRequest' from JSON`,
  );
}
