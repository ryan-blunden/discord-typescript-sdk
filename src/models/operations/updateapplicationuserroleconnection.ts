/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateApplicationUserRoleConnectionRequest = {
  applicationId: string;
  updateApplicationUserRoleConnectionRequest:
    components.UpdateApplicationUserRoleConnectionRequest;
};

/** @internal */
export const UpdateApplicationUserRoleConnectionRequest$inboundSchema:
  z.ZodType<UpdateApplicationUserRoleConnectionRequest, z.ZodTypeDef, unknown> =
    z.object({
      application_id: z.string(),
      UpdateApplicationUserRoleConnectionRequest:
        components.UpdateApplicationUserRoleConnectionRequest$inboundSchema,
    }).transform((v) => {
      return remap$(v, {
        "application_id": "applicationId",
        "UpdateApplicationUserRoleConnectionRequest":
          "updateApplicationUserRoleConnectionRequest",
      });
    });

/** @internal */
export type UpdateApplicationUserRoleConnectionRequest$Outbound = {
  application_id: string;
  UpdateApplicationUserRoleConnectionRequest:
    components.UpdateApplicationUserRoleConnectionRequest$Outbound;
};

/** @internal */
export const UpdateApplicationUserRoleConnectionRequest$outboundSchema:
  z.ZodType<
    UpdateApplicationUserRoleConnectionRequest$Outbound,
    z.ZodTypeDef,
    UpdateApplicationUserRoleConnectionRequest
  > = z.object({
    applicationId: z.string(),
    updateApplicationUserRoleConnectionRequest:
      components.UpdateApplicationUserRoleConnectionRequest$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      applicationId: "application_id",
      updateApplicationUserRoleConnectionRequest:
        "UpdateApplicationUserRoleConnectionRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateApplicationUserRoleConnectionRequest$ {
  /** @deprecated use `UpdateApplicationUserRoleConnectionRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateApplicationUserRoleConnectionRequest$inboundSchema;
  /** @deprecated use `UpdateApplicationUserRoleConnectionRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateApplicationUserRoleConnectionRequest$outboundSchema;
  /** @deprecated use `UpdateApplicationUserRoleConnectionRequest$Outbound` instead. */
  export type Outbound = UpdateApplicationUserRoleConnectionRequest$Outbound;
}

export function updateApplicationUserRoleConnectionRequestToJSON(
  updateApplicationUserRoleConnectionRequest:
    UpdateApplicationUserRoleConnectionRequest,
): string {
  return JSON.stringify(
    UpdateApplicationUserRoleConnectionRequest$outboundSchema.parse(
      updateApplicationUserRoleConnectionRequest,
    ),
  );
}

export function updateApplicationUserRoleConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateApplicationUserRoleConnectionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateApplicationUserRoleConnectionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateApplicationUserRoleConnectionRequest' from JSON`,
  );
}
