/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateMessageMultipartComponents =
  | components.ActionRowComponentForMessageRequest
  | components.MediaGalleryComponentForMessageRequest
  | components.TextDisplayComponentForMessageRequest
  | components.FileComponentForMessageRequest
  | components.SectionComponentForMessageRequest
  | components.SeparatorComponentForMessageRequest
  | components.ContainerComponentForMessageRequest;

export type Nonce = number | string;

export type CreateMessageMultipartRequestBody = {
  content?: string | null | undefined;
  embeds?: Array<components.RichEmbed> | null | undefined;
  allowedMentions?: components.MessageAllowedMentionsRequest | null | undefined;
  stickerIds?: Array<string> | null | undefined;
  components?:
    | Array<
      | components.ActionRowComponentForMessageRequest
      | components.MediaGalleryComponentForMessageRequest
      | components.TextDisplayComponentForMessageRequest
      | components.FileComponentForMessageRequest
      | components.SectionComponentForMessageRequest
      | components.SeparatorComponentForMessageRequest
      | components.ContainerComponentForMessageRequest
    >
    | null
    | undefined;
  flags?: number | null | undefined;
  attachments?: Array<components.MessageAttachmentRequest> | null | undefined;
  poll?: components.PollCreateRequest | null | undefined;
  confettiPotion?: components.ConfettiPotionCreateRequest | null | undefined;
  messageReference?: components.MessageReferenceRequest | null | undefined;
  nonce?: number | string | null | undefined;
  enforceNonce?: boolean | null | undefined;
  tts?: boolean | null | undefined;
  files0?: string | undefined;
  files1?: string | undefined;
  files2?: string | undefined;
  files3?: string | undefined;
  files4?: string | undefined;
  files5?: string | undefined;
  files6?: string | undefined;
  files7?: string | undefined;
  files8?: string | undefined;
  files9?: string | undefined;
};

export type CreateMessageMultipartRequest = {
  channelId: string;
  requestBody: CreateMessageMultipartRequestBody;
};

/** @internal */
export const CreateMessageMultipartComponents$inboundSchema: z.ZodType<
  CreateMessageMultipartComponents,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ActionRowComponentForMessageRequest$inboundSchema,
  components.MediaGalleryComponentForMessageRequest$inboundSchema,
  components.TextDisplayComponentForMessageRequest$inboundSchema,
  components.FileComponentForMessageRequest$inboundSchema,
  components.SectionComponentForMessageRequest$inboundSchema,
  components.SeparatorComponentForMessageRequest$inboundSchema,
  components.ContainerComponentForMessageRequest$inboundSchema,
]);

/** @internal */
export type CreateMessageMultipartComponents$Outbound =
  | components.ActionRowComponentForMessageRequest$Outbound
  | components.MediaGalleryComponentForMessageRequest$Outbound
  | components.TextDisplayComponentForMessageRequest$Outbound
  | components.FileComponentForMessageRequest$Outbound
  | components.SectionComponentForMessageRequest$Outbound
  | components.SeparatorComponentForMessageRequest$Outbound
  | components.ContainerComponentForMessageRequest$Outbound;

/** @internal */
export const CreateMessageMultipartComponents$outboundSchema: z.ZodType<
  CreateMessageMultipartComponents$Outbound,
  z.ZodTypeDef,
  CreateMessageMultipartComponents
> = z.union([
  components.ActionRowComponentForMessageRequest$outboundSchema,
  components.MediaGalleryComponentForMessageRequest$outboundSchema,
  components.TextDisplayComponentForMessageRequest$outboundSchema,
  components.FileComponentForMessageRequest$outboundSchema,
  components.SectionComponentForMessageRequest$outboundSchema,
  components.SeparatorComponentForMessageRequest$outboundSchema,
  components.ContainerComponentForMessageRequest$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMessageMultipartComponents$ {
  /** @deprecated use `CreateMessageMultipartComponents$inboundSchema` instead. */
  export const inboundSchema = CreateMessageMultipartComponents$inboundSchema;
  /** @deprecated use `CreateMessageMultipartComponents$outboundSchema` instead. */
  export const outboundSchema = CreateMessageMultipartComponents$outboundSchema;
  /** @deprecated use `CreateMessageMultipartComponents$Outbound` instead. */
  export type Outbound = CreateMessageMultipartComponents$Outbound;
}

export function createMessageMultipartComponentsToJSON(
  createMessageMultipartComponents: CreateMessageMultipartComponents,
): string {
  return JSON.stringify(
    CreateMessageMultipartComponents$outboundSchema.parse(
      createMessageMultipartComponents,
    ),
  );
}

export function createMessageMultipartComponentsFromJSON(
  jsonString: string,
): SafeParseResult<CreateMessageMultipartComponents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateMessageMultipartComponents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateMessageMultipartComponents' from JSON`,
  );
}

/** @internal */
export const Nonce$inboundSchema: z.ZodType<Nonce, z.ZodTypeDef, unknown> = z
  .union([z.number().int(), z.string()]);

/** @internal */
export type Nonce$Outbound = number | string;

/** @internal */
export const Nonce$outboundSchema: z.ZodType<
  Nonce$Outbound,
  z.ZodTypeDef,
  Nonce
> = z.union([z.number().int(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Nonce$ {
  /** @deprecated use `Nonce$inboundSchema` instead. */
  export const inboundSchema = Nonce$inboundSchema;
  /** @deprecated use `Nonce$outboundSchema` instead. */
  export const outboundSchema = Nonce$outboundSchema;
  /** @deprecated use `Nonce$Outbound` instead. */
  export type Outbound = Nonce$Outbound;
}

export function nonceToJSON(nonce: Nonce): string {
  return JSON.stringify(Nonce$outboundSchema.parse(nonce));
}

export function nonceFromJSON(
  jsonString: string,
): SafeParseResult<Nonce, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Nonce$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Nonce' from JSON`,
  );
}

/** @internal */
export const CreateMessageMultipartRequestBody$inboundSchema: z.ZodType<
  CreateMessageMultipartRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.string()).optional(),
  embeds: z.nullable(z.array(components.RichEmbed$inboundSchema)).optional(),
  allowed_mentions: z.nullable(
    components.MessageAllowedMentionsRequest$inboundSchema,
  ).optional(),
  sticker_ids: z.nullable(z.array(z.string())).optional(),
  components: z.nullable(
    z.array(
      z.union([
        components.ActionRowComponentForMessageRequest$inboundSchema,
        components.MediaGalleryComponentForMessageRequest$inboundSchema,
        components.TextDisplayComponentForMessageRequest$inboundSchema,
        components.FileComponentForMessageRequest$inboundSchema,
        components.SectionComponentForMessageRequest$inboundSchema,
        components.SeparatorComponentForMessageRequest$inboundSchema,
        components.ContainerComponentForMessageRequest$inboundSchema,
      ]),
    ),
  ).optional(),
  flags: z.nullable(z.number().int()).optional(),
  attachments: z.nullable(
    z.array(components.MessageAttachmentRequest$inboundSchema),
  ).optional(),
  poll: z.nullable(components.PollCreateRequest$inboundSchema).optional(),
  confetti_potion: z.nullable(
    components.ConfettiPotionCreateRequest$inboundSchema,
  ).optional(),
  message_reference: z.nullable(
    components.MessageReferenceRequest$inboundSchema,
  ).optional(),
  nonce: z.nullable(z.union([z.number().int(), z.string()])).optional(),
  enforce_nonce: z.nullable(z.boolean()).optional(),
  tts: z.nullable(z.boolean()).optional(),
  "files[0]": z.string().optional(),
  "files[1]": z.string().optional(),
  "files[2]": z.string().optional(),
  "files[3]": z.string().optional(),
  "files[4]": z.string().optional(),
  "files[5]": z.string().optional(),
  "files[6]": z.string().optional(),
  "files[7]": z.string().optional(),
  "files[8]": z.string().optional(),
  "files[9]": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "allowed_mentions": "allowedMentions",
    "sticker_ids": "stickerIds",
    "confetti_potion": "confettiPotion",
    "message_reference": "messageReference",
    "enforce_nonce": "enforceNonce",
    "files[0]": "files0",
    "files[1]": "files1",
    "files[2]": "files2",
    "files[3]": "files3",
    "files[4]": "files4",
    "files[5]": "files5",
    "files[6]": "files6",
    "files[7]": "files7",
    "files[8]": "files8",
    "files[9]": "files9",
  });
});

/** @internal */
export type CreateMessageMultipartRequestBody$Outbound = {
  content?: string | null | undefined;
  embeds?: Array<components.RichEmbed$Outbound> | null | undefined;
  allowed_mentions?:
    | components.MessageAllowedMentionsRequest$Outbound
    | null
    | undefined;
  sticker_ids?: Array<string> | null | undefined;
  components?:
    | Array<
      | components.ActionRowComponentForMessageRequest$Outbound
      | components.MediaGalleryComponentForMessageRequest$Outbound
      | components.TextDisplayComponentForMessageRequest$Outbound
      | components.FileComponentForMessageRequest$Outbound
      | components.SectionComponentForMessageRequest$Outbound
      | components.SeparatorComponentForMessageRequest$Outbound
      | components.ContainerComponentForMessageRequest$Outbound
    >
    | null
    | undefined;
  flags?: number | null | undefined;
  attachments?:
    | Array<components.MessageAttachmentRequest$Outbound>
    | null
    | undefined;
  poll?: components.PollCreateRequest$Outbound | null | undefined;
  confetti_potion?:
    | components.ConfettiPotionCreateRequest$Outbound
    | null
    | undefined;
  message_reference?:
    | components.MessageReferenceRequest$Outbound
    | null
    | undefined;
  nonce?: number | string | null | undefined;
  enforce_nonce?: boolean | null | undefined;
  tts?: boolean | null | undefined;
  "files[0]"?: string | undefined;
  "files[1]"?: string | undefined;
  "files[2]"?: string | undefined;
  "files[3]"?: string | undefined;
  "files[4]"?: string | undefined;
  "files[5]"?: string | undefined;
  "files[6]"?: string | undefined;
  "files[7]"?: string | undefined;
  "files[8]"?: string | undefined;
  "files[9]"?: string | undefined;
};

/** @internal */
export const CreateMessageMultipartRequestBody$outboundSchema: z.ZodType<
  CreateMessageMultipartRequestBody$Outbound,
  z.ZodTypeDef,
  CreateMessageMultipartRequestBody
> = z.object({
  content: z.nullable(z.string()).optional(),
  embeds: z.nullable(z.array(components.RichEmbed$outboundSchema)).optional(),
  allowedMentions: z.nullable(
    components.MessageAllowedMentionsRequest$outboundSchema,
  ).optional(),
  stickerIds: z.nullable(z.array(z.string())).optional(),
  components: z.nullable(
    z.array(
      z.union([
        components.ActionRowComponentForMessageRequest$outboundSchema,
        components.MediaGalleryComponentForMessageRequest$outboundSchema,
        components.TextDisplayComponentForMessageRequest$outboundSchema,
        components.FileComponentForMessageRequest$outboundSchema,
        components.SectionComponentForMessageRequest$outboundSchema,
        components.SeparatorComponentForMessageRequest$outboundSchema,
        components.ContainerComponentForMessageRequest$outboundSchema,
      ]),
    ),
  ).optional(),
  flags: z.nullable(z.number().int()).optional(),
  attachments: z.nullable(
    z.array(components.MessageAttachmentRequest$outboundSchema),
  ).optional(),
  poll: z.nullable(components.PollCreateRequest$outboundSchema).optional(),
  confettiPotion: z.nullable(
    components.ConfettiPotionCreateRequest$outboundSchema,
  ).optional(),
  messageReference: z.nullable(
    components.MessageReferenceRequest$outboundSchema,
  ).optional(),
  nonce: z.nullable(z.union([z.number().int(), z.string()])).optional(),
  enforceNonce: z.nullable(z.boolean()).optional(),
  tts: z.nullable(z.boolean()).optional(),
  files0: z.string().optional(),
  files1: z.string().optional(),
  files2: z.string().optional(),
  files3: z.string().optional(),
  files4: z.string().optional(),
  files5: z.string().optional(),
  files6: z.string().optional(),
  files7: z.string().optional(),
  files8: z.string().optional(),
  files9: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    allowedMentions: "allowed_mentions",
    stickerIds: "sticker_ids",
    confettiPotion: "confetti_potion",
    messageReference: "message_reference",
    enforceNonce: "enforce_nonce",
    files0: "files[0]",
    files1: "files[1]",
    files2: "files[2]",
    files3: "files[3]",
    files4: "files[4]",
    files5: "files[5]",
    files6: "files[6]",
    files7: "files[7]",
    files8: "files[8]",
    files9: "files[9]",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMessageMultipartRequestBody$ {
  /** @deprecated use `CreateMessageMultipartRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateMessageMultipartRequestBody$inboundSchema;
  /** @deprecated use `CreateMessageMultipartRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateMessageMultipartRequestBody$outboundSchema;
  /** @deprecated use `CreateMessageMultipartRequestBody$Outbound` instead. */
  export type Outbound = CreateMessageMultipartRequestBody$Outbound;
}

export function createMessageMultipartRequestBodyToJSON(
  createMessageMultipartRequestBody: CreateMessageMultipartRequestBody,
): string {
  return JSON.stringify(
    CreateMessageMultipartRequestBody$outboundSchema.parse(
      createMessageMultipartRequestBody,
    ),
  );
}

export function createMessageMultipartRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateMessageMultipartRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateMessageMultipartRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateMessageMultipartRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateMessageMultipartRequest$inboundSchema: z.ZodType<
  CreateMessageMultipartRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel_id: z.string(),
  RequestBody: z.lazy(() => CreateMessageMultipartRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "channel_id": "channelId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateMessageMultipartRequest$Outbound = {
  channel_id: string;
  RequestBody: CreateMessageMultipartRequestBody$Outbound;
};

/** @internal */
export const CreateMessageMultipartRequest$outboundSchema: z.ZodType<
  CreateMessageMultipartRequest$Outbound,
  z.ZodTypeDef,
  CreateMessageMultipartRequest
> = z.object({
  channelId: z.string(),
  requestBody: z.lazy(() => CreateMessageMultipartRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    channelId: "channel_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMessageMultipartRequest$ {
  /** @deprecated use `CreateMessageMultipartRequest$inboundSchema` instead. */
  export const inboundSchema = CreateMessageMultipartRequest$inboundSchema;
  /** @deprecated use `CreateMessageMultipartRequest$outboundSchema` instead. */
  export const outboundSchema = CreateMessageMultipartRequest$outboundSchema;
  /** @deprecated use `CreateMessageMultipartRequest$Outbound` instead. */
  export type Outbound = CreateMessageMultipartRequest$Outbound;
}

export function createMessageMultipartRequestToJSON(
  createMessageMultipartRequest: CreateMessageMultipartRequest,
): string {
  return JSON.stringify(
    CreateMessageMultipartRequest$outboundSchema.parse(
      createMessageMultipartRequest,
    ),
  );
}

export function createMessageMultipartRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateMessageMultipartRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateMessageMultipartRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateMessageMultipartRequest' from JSON`,
  );
}
